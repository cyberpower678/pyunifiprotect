{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#unofficial-unifi-protect-python-api-and-cli","title":"Unofficial UniFi Protect Python API and CLI","text":"<p><code>pyunifiprotect</code> is an unofficial API for UniFi Protect. There is no affiliation with Ubiquiti.</p> <p>This module communicates with UniFi Protect surveillance software installed on a UniFi OS Console such as a Ubiquiti CloudKey+ or UniFi Dream Machine Pro.</p> <p>The API is not documented by Ubiquiti, so there might be misses and/or frequent changes in this module, as Ubiquiti evolves the software.</p> <p>The module is primarily written for the purpose of being used in Home Assistant core integration for UniFi Protect but might be used for other purposes also.</p>"},{"location":"#smart-detections-now-require-remote-access-to-enable","title":"Smart Detections now Require Remote Access to enable","text":"<p>Smart Detections (person, vehicle, animal, face), a feature that previously could be used with local only console, now requires you to enable remote access to enable.</p> <p>Enabling Remote Access may grant other users access to your console due to the fact Ubiquiti can reconfigure access controls at any time.</p> <p>If you are not okay with the feature being locked behind Remote Access access, let Ubiquiti know.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Full documentation for the project.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>If you want to install <code>pyunifiprotect</code> natively, the below are the requirements:</p> <ul> <li>UniFi Protect version 1.20+<ul> <li>Latest version of library is generally only tested against the two latest minor version. This is either two latest stable versions (such as 1.21.x and 2.0.x) or the latest EA version and stable version (such as 2.2.x EA and 2.1.x).</li> </ul> </li> <li>Python 3.9+</li> <li>POSIX compatible system<ul> <li>Library is only test on Linux, specifically the latest Debian version available for the official Python Docker images, but there is no reason the library should not work on any Linux distro or MacOS.</li> </ul> </li> <li>ffmpeg<ul> <li>ffmpeg is primarily only for streaming audio to Protect cameras, this can be considered a soft requirement</li> </ul> </li> </ul> <p>Alternatively you can use the provided Docker container, in which case the only requirement is Docker or another OCI compatible orchestrator (such as Kubernetes or podman).</p> <p>Windows is not supported. If you need to use <code>pyunifiprotect</code> on Windows, use Docker Desktop and the provided docker container or WSL.</p>"},{"location":"#install","title":"Install","text":""},{"location":"#from-pypi","title":"From PyPi","text":"<p><code>pyunifiprotect</code> is available on PyPi:</p> Bash<pre><code>pip install pyunifiprotect\n</code></pre>"},{"location":"#from-github","title":"From Github","text":"Bash<pre><code>pip install git+https://github.com/AngellusMortis/pyunifiprotect.git#egg=pyunifiprotect\n</code></pre>"},{"location":"#using-docker-container","title":"Using Docker Container","text":"<p>A Docker container is also provided so you do not need to install/manage Python as well. You can add the following to your <code>.bashrc</code> or similar.</p> Bash<pre><code>function unifi-protect() {\n    docker run --rm -it \\\n      -e UFP_USERNAME=YOUR_USERNAME_HERE \\\n      -e UFP_PASSWORD=YOUR_PASSWORD_HERE \\\n      -e UFP_ADDRESS=YOUR_IP_ADDRESS \\\n      -e UFP_PORT=443 \\\n      -e UFP_SSL_VERIFY=True \\\n      -e TZ=America/New_York \\\n      -v $PWD:/data ghcr.io/angellusmortis/pyunifiprotect:latest \"$@\"\n}\n</code></pre> <p>Some notes about the Docker version since it is running inside of a container:</p> <ul> <li>You can update at any time using the command <code>docker pull ghcr.io/AngellusMortis/pyunifiprotect:latest</code></li> <li>Your local current working directory (<code>$PWD</code>) will automatically be mounted to <code>/data</code> inside of the container. For commands that output files, this is the only path you can write to and have the file persist.</li> <li>The container supports <code>linux/amd64</code> and <code>linux/arm64</code> natively. This means it will also work well on MacOS or Windows using Docker Desktop.</li> <li>For versions of <code>pyunifiprotect</code> before v4.1.5, you need to use the <code>ghcr.io/briis/pyunifiprotect</code> image instead.</li> <li><code>TZ</code> should be the Olson timezone name for the timezone your UniFi Protect instance is in.</li> <li>For more details on <code>TZ</code> and other environment variables, check the command line docs</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":""},{"location":"#cli","title":"CLI","text":"<p>About Ubiquiti SSO accounts</p> <p>Ubiquiti SSO accounts are not supported and actively discouraged from being used. There is no option to use MFA. You are expected to use local access user. <code>pyunifiprotect</code> is not designed to allow you to use your owner account to access the your console or to be used over the public Internet as both pose a security risk.</p> Bash<pre><code>export UFP_USERNAME=YOUR_USERNAME_HERE\nexport UFP_PASSWORD=YOUR_PASSWORD_HERE\nexport UFP_ADDRESS=YOUR_IP_ADDRESS\nexport UFP_PORT=443\n# change to false if you do not have a valid HTTPS Certificate for your instance\nexport UFP_SSL_VERIFY=True\n\nunifi-protect --help\nunifi-protect nvr\n</code></pre>"},{"location":"#python","title":"Python","text":"<p>UniFi Protect itself is 100% async, so as such this library is primarily designed to be used in an async context.</p> <p>The main interface for the library is the <code>pyunifiprotect.ProtectApiClient</code>:</p> Python<pre><code>from pyunifiprotect import ProtectApiClient\n\nprotect = ProtectApiClient(host, port, username, password, verify_ssl=True)\n\nawait protect.update() # this will initialize the protect .bootstrap and open a Websocket connection for updates\n\n# get names of your cameras\nfor camera in protect.bootstrap.cameras.values():\n    print(camera.name)\n\n# subscribe to Websocket for updates to UFP\ndef callback(msg: WSSubscriptionMessage):\n    # do stuff\n\nunsub = protect.subscribe_websocket(callback)\n\n# remove subscription\nunsub()\n</code></pre>"},{"location":"#todo-planned-not-implemented","title":"TODO / Planned / Not Implemented","text":"<p>Generally any feature missing from the library is planned to be done eventually / nice to have with the following exceptions</p>"},{"location":"#unifi-os-features","title":"UniFi OS Features","text":"<p>Anything that is strictly a UniFi OS feature. If it ever done, it will be in a separate library that interacts with this one. Examples include:</p> <ul> <li>Managing RAID and disks</li> <li>Creating and managing users</li> </ul>"},{"location":"#remote-access-ubiquiti-cloud-features","title":"Remote Access / Ubiquiti Cloud Features","text":"<p>Anything that requires a Ubiquiti Account or \"Remote Access\" to be enabled is never going to be implemented by me (@AngellusMortis) as I support UniFi Protect as a 100% local only product. PRs are welcome to implement any related features though.</p> <p>Examples include:</p> <ul> <li>Stream sharing</li> <li>Smart Detections, including person, vehicle, animals license plate and faces</li> </ul>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Bjarne Riis (@briis) for the original pyunifiprotect package</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#api-client-pyunifiprotectapi","title":"API Client (<code>pyunifiprotect.api</code>)","text":"<p>UniFi Protect Server Wrapper.</p>"},{"location":"api/#pyunifiprotect.api.BaseApiClient","title":"<code>BaseApiClient</code>","text":""},{"location":"api/#pyunifiprotect.api.BaseApiClient.os_client","title":"<code>os_client: UnifiOSClient</code>  <code>property</code>","text":"<p>Get UniFi OS client.</p>"},{"location":"api/#pyunifiprotect.api.BaseApiClient.protect_url","title":"<code>protect_url: str</code>  <code>property</code>","text":"<p>Base Protect URL.</p>"},{"location":"api/#pyunifiprotect.api.BaseApiClient.api_request_raw","title":"<code>api_request_raw(url: str, method: str = 'get', require_auth: bool = True, raise_exception: bool = True, **kwargs: Any) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Make a request to UniFi Protect API</p>"},{"location":"api/#pyunifiprotect.api.BaseApiClient.async_connect_ws","title":"<code>async_connect_ws(force: bool) -&gt; None</code>  <code>async</code>","text":"<p>Connect to Websocket.</p>"},{"location":"api/#pyunifiprotect.api.BaseApiClient.async_disconnect_ws","title":"<code>async_disconnect_ws() -&gt; None</code>  <code>async</code>","text":"<p>Disconnect from Websocket.</p>"},{"location":"api/#pyunifiprotect.api.BaseApiClient.check_ws","title":"<code>check_ws() -&gt; bool</code>","text":"<p>Checks current state of Websocket.</p>"},{"location":"api/#pyunifiprotect.api.BaseApiClient.close_session","title":"<code>close_session() -&gt; None</code>  <code>async</code>","text":"<p>Closing and delets client session</p>"},{"location":"api/#pyunifiprotect.api.BaseApiClient.get_session","title":"<code>get_session() -&gt; aiohttp.ClientSession</code>  <code>async</code>","text":"<p>Gets or creates current client session</p>"},{"location":"api/#pyunifiprotect.api.BaseApiClient.get_websocket","title":"<code>get_websocket() -&gt; Websocket</code>  <code>async</code>","text":"<p>Gets or creates current Websocket.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient","title":"<code>ProtectApiClient</code>","text":"<p>               Bases: <code>BaseApiClient</code></p> <p>Main UFP API Client</p> <p>UniFi Protect is a full async application. \"normal\" use of interacting with it is to call <code>.update()</code> which will initialize the <code>.bootstrap</code> and create a Websocket connection to UFP. This Websocket connection will emit messages that will automatically update the <code>.bootstrap</code> over time. Caling <code>.udpate</code> again (without <code>force</code>) will verify the integry of the Websocket connection.</p> <p>You can use the <code>.get_</code> methods to one off pull devices from the UFP API, but should not be used for building an aplication on top of.</p> <p>All objects inside of <code>.bootstrap</code> have a refernce back to the API client so they can use <code>.save_device()</code> and update themselves using their own <code>.set_</code> methods on the object.</p> Text Only<pre><code>host: UFP hostname / IP address\nport: UFP HTTPS port\nusername: UFP username\npassword: UFP password\nverify_ssl: Verify HTTPS certificate (default: `True`)\nsession: Optional aiohttp session to use (default: generate one)\noverride_connection_host: Use `host` as your `connection_host` for RTSP stream instead of using the one provided by UniFi Protect.\nminimum_score: minimum score for events (default: `0`)\nsubscribed_models: Model types you want to filter events for WS. You will need to manually check the bootstrap for updates for events that not subscibred.\nignore_stats: Ignore storage, system, etc. stats/metrics from NVR and cameras (default: false)\ndebug: Use full type validation (default: false)\n</code></pre>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.connection_host","title":"<code>connection_host: Union[IPv4Address, IPv6Address, str]</code>  <code>property</code>","text":"<p>Connection host to use for generating RTSP URLs</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.adopt_device","title":"<code>adopt_device(model_type: ModelType, device_id: str) -&gt; None</code>  <code>async</code>","text":"<p>Adopts a device</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.calibrate_lock","title":"<code>calibrate_lock(device_id: str) -&gt; None</code>  <code>async</code>","text":"<p>Calibrate the doorlock.</p> <p>Door must be open and lock unlocked.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.center_ptz_camera","title":"<code>center_ptz_camera(device_id: str, *, x: int, y: int, z: int) -&gt; None</code>  <code>async</code>","text":"<p>Center PTZ Camera on point in viewport.</p> <p>x, y, z values range from 0 to 1000.</p> <p>x, y are relative coords for the current viewport:     * (0, 0) is top left     * (500, 500) is the center     * (1000, 1000) is the bottom right</p> <p>z value is zoom, but since it is capped at 1000, probably better to use <code>ptz_zoom_camera</code>.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.clear_tamper_sensor","title":"<code>clear_tamper_sensor(device_id: str) -&gt; None</code>  <code>async</code>","text":"<p>Clears tamper status for sensor</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.close_lock","title":"<code>close_lock(device_id: str) -&gt; None</code>  <code>async</code>","text":"<p>Close doorlock (lock)</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.create_patrol_ptz_camera","title":"<code>create_patrol_ptz_camera(device_id: str, *, name: str, preset_slots: list[int], duration: int = 10) -&gt; PTZPatrol</code>  <code>async</code>","text":"<p>Create PTZ Patrol.</p> <p>Duration is how long camera waits at each preset in seconds. Must be between 10 and 60.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.create_preset_ptz_camera","title":"<code>create_preset_ptz_camera(device_id: str, *, name: str) -&gt; PTZPreset</code>  <code>async</code>","text":"<p>Create PTZ Preset for camera based on current camera settings.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.delete_animation","title":"<code>delete_animation(sprite: str) -&gt; None</code>  <code>async</code>","text":"<p>Delete image file for doorbells.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.delete_patrol_ptz_camera","title":"<code>delete_patrol_ptz_camera(device_id: str, slot: int) -&gt; None</code>  <code>async</code>","text":"<p>Delete PTZ Patrol.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.delete_preset_ptz_camera","title":"<code>delete_preset_ptz_camera(device_id: str, *, slot: int) -&gt; None</code>  <code>async</code>","text":"<p>Delete PTZ preset for camera.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_active_ptz_patrol","title":"<code>get_active_ptz_patrol(device_id: str) -&gt; PTZPatrol | None</code>  <code>async</code>","text":"<p>Get active PTZ Patrol.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_bootstrap","title":"<code>get_bootstrap() -&gt; Bootstrap</code>  <code>async</code>","text":"<p>Gets bootstrap object from UFP instance</p> <p>This is a great alternative if you need metadata about the NVR without connecting to the Websocket</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_bridge","title":"<code>get_bridge(device_id: str) -&gt; Bridge</code>  <code>async</code>","text":"<p>Gets a bridge straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.bridges[device_id]</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_bridges","title":"<code>get_bridges() -&gt; list[Bridge]</code>  <code>async</code>","text":"<p>Gets the list of bridges straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.bridges</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_camera","title":"<code>get_camera(device_id: str) -&gt; Camera</code>  <code>async</code>","text":"<p>Gets a camera straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.cameras[device_id]</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_camera_snapshot","title":"<code>get_camera_snapshot(camera_id: str, width: Optional[int] = None, height: Optional[int] = None, dt: Optional[datetime] = None) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Gets snapshot for a camera.</p> <p>Datetime of screenshot is approximate. It may be +/- a few seconds.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_camera_video","title":"<code>get_camera_video(camera_id: str, start: datetime, end: datetime, channel_index: int = 0, validate_channel_id: bool = True, output_file: Optional[Path] = None, iterator_callback: Optional[IteratorCallback] = None, progress_callback: Optional[ProgressCallback] = None, chunk_size: int = 65536, fps: Optional[int] = None) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Exports MP4 video from a given camera at a specific time.</p> <p>Start/End of video export are approximate. It may be +/- a few seconds.</p> <p>It is recommended to provide a output file or progress callback for larger video clips, otherwise the full video must be downloaded to memory before being written.</p> <p>Providing the <code>fps</code> parameter creates a \"timelapse\" export wtih the given FPS value. Protect app gives the options for 60x (fps=4), 120x (fps=8), 300x (fps=20), and 600x (fps=40).</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_cameras","title":"<code>get_cameras() -&gt; list[Camera]</code>  <code>async</code>","text":"<p>Gets the list of cameras straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.cameras</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_chime","title":"<code>get_chime(device_id: str) -&gt; Chime</code>  <code>async</code>","text":"<p>Gets a chime straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.chimes[device_id]</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_chimes","title":"<code>get_chimes() -&gt; list[Chime]</code>  <code>async</code>","text":"<p>Gets the list of chimes straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.chimes</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_device","title":"<code>get_device(model_type: ModelType, device_id: str, expected_type: Optional[type[ProtectModelWithId]] = None) -&gt; ProtectModelWithId</code>  <code>async</code>","text":"<p>Gets a device give the device model_type and id, converted into Python object</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_device_raw","title":"<code>get_device_raw(model_type: ModelType, device_id: str) -&gt; dict[str, Any]</code>  <code>async</code>","text":"<p>Gets a raw device give the device model_type and id</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_devices","title":"<code>get_devices(model_type: ModelType, expected_type: Optional[type[ProtectModel]] = None) -&gt; list[ProtectModel]</code>  <code>async</code>","text":"<p>Gets a device list given a model_type, converted into Python objects</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_devices_raw","title":"<code>get_devices_raw(model_type: ModelType) -&gt; list[dict[str, Any]]</code>  <code>async</code>","text":"<p>Gets a raw device list given a model_type</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_doorlock","title":"<code>get_doorlock(device_id: str) -&gt; Doorlock</code>  <code>async</code>","text":"<p>Gets a doorlock straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.doorlocks[device_id]</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_doorlocks","title":"<code>get_doorlocks() -&gt; list[Doorlock]</code>  <code>async</code>","text":"<p>Gets the list of doorlocks straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.doorlocks</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_event","title":"<code>get_event(event_id: str) -&gt; Event</code>  <code>async</code>","text":"<p>Gets an event straight from the NVR.</p> <p>This is a great alternative if the event is no longer in the <code>self.bootstrap.events[event_id]</code> cache</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_event_animated_thumbnail","title":"<code>get_event_animated_thumbnail(thumbnail_id: str, width: Optional[int] = None, height: Optional[int] = None, *, speedup: int = 10, retry_timeout: int = RETRY_TIMEOUT) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Gets given animated thumbanil from a given event.</p> <p>Animated thumbnail response is a GIF image.</p> <p>Note: thumbnails / do not generate until after the event ends. Events that last longer then your retry timeout will always return 404.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_event_heatmap","title":"<code>get_event_heatmap(heatmap_id: str, retry_timeout: int = RETRY_TIMEOUT) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Gets given heatmap from a given event.</p> <p>Heatmap response is a PNG image.</p> <p>Note: thumbnails / heatmaps do not generate until after the event ends. Events that last longer then your retry timeout will always return None.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_event_smart_detect_track","title":"<code>get_event_smart_detect_track(event_id: str) -&gt; SmartDetectTrack</code>  <code>async</code>","text":"<p>Gets raw Smart Detect Track for a Smart Detection</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_event_smart_detect_track_raw","title":"<code>get_event_smart_detect_track_raw(event_id: str) -&gt; dict[str, Any]</code>  <code>async</code>","text":"<p>Gets raw Smart Detect Track for a Smart Detection</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_event_thumbnail","title":"<code>get_event_thumbnail(thumbnail_id: str, width: Optional[int] = None, height: Optional[int] = None, retry_timeout: int = RETRY_TIMEOUT) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Gets given thumbanail from a given event.</p> <p>Thumbnail response is a JPEG image.</p> <p>Note: thumbnails / heatmaps do not generate until after the event ends. Events that last longer then your retry timeout will always return 404.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_events","title":"<code>get_events(start: Optional[datetime] = None, end: Optional[datetime] = None, limit: Optional[int] = None, offset: Optional[int] = None, types: Optional[list[EventType]] = None, smart_detect_types: Optional[list[SmartDetectObjectType]] = None, sorting: Literal['asc', 'desc'] = 'asc', descriptions: bool = True, category: EventCategories | None = None, _allow_manual_paginate: bool = True) -&gt; list[Event]</code>  <code>async</code>","text":"<p>Same as <code>get_events_raw</code>, except</p> <ul> <li>returns actual <code>Event</code> objects instead of raw Python dictionaries</li> <li>filers out non-device events</li> <li>filters out events with too low of a score</li> </ul> Text Only<pre><code>start: start time for events\nend: end time for events\nlimit: max number of events to return\noffset: offset to start fetching events from\ntypes: list of EventTypes to get events for\nsmart_detect_types: Filters the Smart detection types for the events\nsorting: sort events by ascending or decending, defaults to ascending (chronologic order)\ndescription: included additional event metadata\ncategory: event category, will provide additional category/subcategory fields\n</code></pre> <p>If <code>limit</code>, <code>start</code> and <code>end</code> are not provided, it will default to all events in the last 24 hours.</p> <p>If <code>start</code> is provided, then <code>end</code> or <code>limit</code> must be provided. If <code>end</code> is provided, then <code>start</code> or <code>limit</code> must be provided. Otherwise, you will get a 400 error from UniFi Protect</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_events_raw","title":"<code>get_events_raw(*, start: Optional[datetime] = None, end: Optional[datetime] = None, limit: Optional[int] = None, offset: Optional[int] = None, types: Optional[list[EventType]] = None, smart_detect_types: Optional[list[SmartDetectObjectType]] = None, sorting: Literal['asc', 'desc'] = 'asc', descriptions: bool = True, all_cameras: Optional[bool] = None, category: EventCategories | None = None, _allow_manual_paginate: bool = True) -&gt; list[dict[str, Any]]</code>  <code>async</code>","text":"<p>Get list of events from Protect</p> Text Only<pre><code>start: start time for events\nend: end time for events\nlimit: max number of events to return\noffset: offset to start fetching events from\ntypes: list of EventTypes to get events for\nsmart_detect_types: Filters the Smart detection types for the events\nsorting: sort events by ascending or decending, defaults to ascending (chronologic order)\ndescription: included additional event metadata\ncategory: event category, will provide additional category/subcategory fields\n</code></pre> <p>If <code>limit</code>, <code>start</code> and <code>end</code> are not provided, it will default to all events in the last 24 hours.</p> <p>If <code>start</code> is provided, then <code>end</code> or <code>limit</code> must be provided. If <code>end</code> is provided, then <code>start</code> or <code>limit</code> must be provided. Otherwise, you will get a 400 error from UniFi Protect</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_home_ptz_camera","title":"<code>get_home_ptz_camera(device_id: str) -&gt; PTZPreset</code>  <code>async</code>","text":"<p>Get PTZ home preset (-1).</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_light","title":"<code>get_light(device_id: str) -&gt; Light</code>  <code>async</code>","text":"<p>Gets a light straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.lights[device_id]</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_lights","title":"<code>get_lights() -&gt; list[Light]</code>  <code>async</code>","text":"<p>Gets the list of lights straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.lights</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_liveview","title":"<code>get_liveview(device_id: str) -&gt; Liveview</code>  <code>async</code>","text":"<p>Gets a liveview straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.liveviews[device_id]</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_liveviews","title":"<code>get_liveviews() -&gt; list[Liveview]</code>  <code>async</code>","text":"<p>Gets the list of liveviews straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.liveviews</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_nvr","title":"<code>get_nvr() -&gt; NVR</code>  <code>async</code>","text":"<p>Gets an NVR object straight from the NVR.</p> <p>This is a great alternative if you need metadata about the NVR without connecting to the Websocket</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_package_camera_snapshot","title":"<code>get_package_camera_snapshot(camera_id: str, width: Optional[int] = None, height: Optional[int] = None, dt: Optional[datetime] = None) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Gets snapshot from the package camera.</p> <p>Datetime of screenshot is approximate. It may be +/- a few seconds.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_patrols_ptz_camera","title":"<code>get_patrols_ptz_camera(device_id: str) -&gt; list[PTZPatrol]</code>  <code>async</code>","text":"<p>Get PTZ Patrols.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_position_ptz_camera","title":"<code>get_position_ptz_camera(device_id: str) -&gt; PTZPosition</code>  <code>async</code>","text":"<p>Get current PTZ camera position.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_presets_ptz_camera","title":"<code>get_presets_ptz_camera(device_id: str) -&gt; list[PTZPreset]</code>  <code>async</code>","text":"<p>Get PTZ Presets for camera.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_release_versions","title":"<code>get_release_versions() -&gt; set[Version]</code>  <code>async</code>","text":"<p>Get all release versions for UniFi Protect</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_sensor","title":"<code>get_sensor(device_id: str) -&gt; Sensor</code>  <code>async</code>","text":"<p>Gets a sensor straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.sensors[device_id]</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_sensors","title":"<code>get_sensors() -&gt; list[Sensor]</code>  <code>async</code>","text":"<p>Gets the list of sensors straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.sensors</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_viewer","title":"<code>get_viewer(device_id: str) -&gt; Viewer</code>  <code>async</code>","text":"<p>Gets a viewer straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.viewers[device_id]</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.get_viewers","title":"<code>get_viewers() -&gt; list[Viewer]</code>  <code>async</code>","text":"<p>Gets the list of viewers straight from the NVR.</p> <p>The websocket is connected and running, you likely just want to use <code>self.bootstrap.viewers</code></p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.goto_ptz_camera","title":"<code>goto_ptz_camera(device_id: str, *, slot: int = -1) -&gt; None</code>  <code>async</code>","text":"<p>Goto PTZ slot position.</p> <p>-1 is Home slot.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.open_lock","title":"<code>open_lock(device_id: str) -&gt; None</code>  <code>async</code>","text":"<p>Open doorlock (unlock)</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.play_buzzer","title":"<code>play_buzzer(device_id: str) -&gt; None</code>  <code>async</code>","text":"<p>Plays chime tones on a chime</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.play_speaker","title":"<code>play_speaker(device_id: str, *, volume: int | None = None, repeat_times: int | None = None) -&gt; None</code>  <code>async</code>","text":"<p>Plays chime tones on a chime</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.reboot_device","title":"<code>reboot_device(model_type: ModelType, device_id: str) -&gt; None</code>  <code>async</code>","text":"<p>Reboots an adopted device</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.reboot_nvr","title":"<code>reboot_nvr() -&gt; None</code>  <code>async</code>","text":"<p>Reboots NVR</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.relative_move_ptz_camera","title":"<code>relative_move_ptz_camera(device_id: str, *, pan: float, tilt: float, pan_speed: int = 10, tilt_speed: int = 10, scale: int = 0) -&gt; None</code>  <code>async</code>","text":"<p>Move PTZ Camera relatively.</p> <p>Pan/tilt values vary from camera to camera, but for G4 PTZ:     * Pan values range from 1 (0\u00b0) to 35200 (360\u00b0/0\u00b0).     * Tilt values range from 1 (-20\u00b0) to 9777 (90\u00b0).</p> <p>Relative positions cannot move more then 4095 units in either direction at a time.</p> <p>Camera objects have ptz values in feature flags and the methods on them provide better control.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.set_home_ptz_camera","title":"<code>set_home_ptz_camera(device_id: str) -&gt; PTZPreset</code>  <code>async</code>","text":"<p>Set PTZ home preset (-1) to current position.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.set_url","title":"<code>set_url(host: str, port: int) -&gt; None</code>","text":"<p>Set base URL.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.start_patrol_ptz_camera","title":"<code>start_patrol_ptz_camera(device_id: str, slot: int) -&gt; None</code>  <code>async</code>","text":"<p>Start a PTZ Patrol.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.subscribe_websocket","title":"<code>subscribe_websocket(ws_callback: Callable[[WSSubscriptionMessage], None]) -&gt; Callable[[], None]</code>","text":"<p>Subscribe to websocket events.</p> <p>Returns a callback that will unsubscribe.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.unadopt_device","title":"<code>unadopt_device(model_type: ModelType, device_id: str) -&gt; None</code>  <code>async</code>","text":"<p>Unadopt/Unmanage adopted device</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.update","title":"<code>update(force: bool = False) -&gt; Optional[Bootstrap]</code>  <code>async</code>","text":"<p>Updates the state of devices, initalizes <code>.bootstrap</code> and connects to UFP Websocket for real time updates</p> <p>You can use the various other <code>get_</code> methods if you need one off data from UFP</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.update_device","title":"<code>update_device(model_type: ModelType, device_id: str, data: dict[str, Any]) -&gt; None</code>  <code>async</code>","text":"<p>Sends an update for a device back to UFP</p> <p>USE WITH CAUTION, all possible combinations of updating objects have not been fully tested. May have unexpected side effects.</p> <p>Tested updates have been added a methods on applicable devices.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.update_nvr","title":"<code>update_nvr(data: dict[str, Any]) -&gt; None</code>  <code>async</code>","text":"<p>Sends an update for main UFP NVR device</p> <p>USE WITH CAUTION, all possible combinations of updating objects have not been fully tested. May have unexpected side effects.</p> <p>Tested updates have been added a methods on applicable devices.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.upload_animation","title":"<code>upload_animation(image_path: Path) -&gt; None</code>  <code>async</code>","text":"<p>Upload image file to use with doorbells with color LCD screens.</p>"},{"location":"api/#pyunifiprotect.api.ProtectApiClient.zoom_ptz_camera","title":"<code>zoom_ptz_camera(device_id: str, *, zoom: float, speed: int = 10) -&gt; None</code>  <code>async</code>","text":"<p>Zoom PTZ Camera.</p> <p>Zoom levels vary from camera to camera, but for G4 PTZ it goes from 0 (1x) to 2010 (22x).</p> <p>Zoom speed does not seem to do much, if anything.</p> <p>Camera objects have ptz values in feature flags and the methods on them provide better control.</p>"},{"location":"api/#data-models-pyunifiprotectdata","title":"Data Models (<code>pyunifiprotect.data</code>)","text":""},{"location":"api/#pyunifiprotect.data.Bootstrap","title":"<code>Bootstrap</code>","text":"<p>               Bases: <code>ProtectBaseObject</code></p>"},{"location":"api/#pyunifiprotect.data.Bootstrap.has_media","title":"<code>has_media: bool</code>  <code>property</code>","text":"<p>Checks if user can read media for any camera.</p>"},{"location":"api/#pyunifiprotect.data.Bootstrap.has_smart_detections","title":"<code>has_smart_detections: bool</code>  <code>property</code>","text":"<p>Check if any camera has smart detections.</p>"},{"location":"api/#pyunifiprotect.data.Bootstrap.recording_start","title":"<code>recording_start: datetime | None</code>  <code>property</code>","text":"<p>Get earilest recording date.</p>"},{"location":"api/#pyunifiprotect.data.Bootstrap.get_device_from_id","title":"<code>get_device_from_id(device_id: str) -&gt; ProtectAdoptableDeviceModel | None</code>","text":"<p>Retrieve a device from device ID (without knowing model type).</p>"},{"location":"api/#pyunifiprotect.data.Bootstrap.get_device_from_mac","title":"<code>get_device_from_mac(mac: str) -&gt; ProtectAdoptableDeviceModel | None</code>","text":"<p>Retrieve a device from MAC address.</p>"},{"location":"api/#pyunifiprotect.data.Bootstrap.get_is_prerelease","title":"<code>get_is_prerelease() -&gt; bool</code>  <code>async</code>","text":"<p>Get if current version of Protect is a prerelease version.</p>"},{"location":"api/#pyunifiprotect.data.Bootstrap.refresh_device","title":"<code>refresh_device(model_type: ModelType, device_id: str) -&gt; None</code>  <code>async</code>","text":"<p>Refresh a device in the bootstrap.</p>"},{"location":"api/#pyunifiprotect.data.Camera","title":"<code>Camera</code>","text":"<p>               Bases: <code>ProtectMotionDeviceModel</code></p>"},{"location":"api/#pyunifiprotect.data.Camera.active_audio_detect_types","title":"<code>active_audio_detect_types: set[SmartDetectAudioType]</code>  <code>property</code>","text":"<p>Get active audio detection types.</p>"},{"location":"api/#pyunifiprotect.data.Camera.active_recording_settings","title":"<code>active_recording_settings: RecordingSettings</code>  <code>property</code>","text":"<p>Get active recording settings.</p>"},{"location":"api/#pyunifiprotect.data.Camera.active_smart_detect_settings","title":"<code>active_smart_detect_settings: SmartDetectSettings</code>  <code>property</code>","text":"<p>Get active smart detection settings.</p>"},{"location":"api/#pyunifiprotect.data.Camera.active_smart_detect_types","title":"<code>active_smart_detect_types: set[SmartDetectObjectType]</code>  <code>property</code>","text":"<p>Get active smart detection types.</p>"},{"location":"api/#pyunifiprotect.data.Camera.doorbell_options","title":"<code>doorbell_options: list[LCDMessage] | None</code>  <code>property</code>","text":"<p>Get list of saved doorbell options.</p> <p>Does not include the default message (lcd_message=None).</p>"},{"location":"api/#pyunifiprotect.data.Camera.hdr_mode_display","title":"<code>hdr_mode_display: Literal['auto', 'off', 'always']</code>  <code>property</code>","text":"<p>Get HDR mode similar to how Protect interface works.</p>"},{"location":"api/#pyunifiprotect.data.Camera.icr_lux_display","title":"<code>icr_lux_display: int | None</code>  <code>property</code>","text":"<p>Get ICR Custom Lux value similar to how the Protect interface works.</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_animal_currently_detected","title":"<code>is_animal_currently_detected: bool</code>  <code>property</code>","text":"<p>Is animal currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_animal_detection_on","title":"<code>is_animal_detection_on: bool</code>  <code>property</code>","text":"<p>Is Animal Detection available and enabled (camera will produce package smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_audio_currently_detected","title":"<code>is_audio_currently_detected: bool</code>  <code>property</code>","text":"<p>Is audio detection currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_baby_cry_currently_detected","title":"<code>is_baby_cry_currently_detected: bool</code>  <code>property</code>","text":"<p>Is Baby Cry currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_baby_cry_detection_on","title":"<code>is_baby_cry_detection_on: bool</code>  <code>property</code>","text":"<p>Is Baby Cry Detection available and enabled (camera will produce baby cry smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_bark_currently_detected","title":"<code>is_bark_currently_detected: bool</code>  <code>property</code>","text":"<p>Is Bark currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_bark_detection_on","title":"<code>is_bark_detection_on: bool</code>  <code>property</code>","text":"<p>Is Bark Detection available and enabled (camera will produce barking smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_car_alarm_currently_detected","title":"<code>is_car_alarm_currently_detected: bool</code>  <code>property</code>","text":"<p>Is Car Alarm currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_car_alarm_detection_on","title":"<code>is_car_alarm_detection_on: bool</code>  <code>property</code>","text":"<p>Is Car Alarm Detection available and enabled (camera will produce car alarm smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_car_horn_currently_detected","title":"<code>is_car_horn_currently_detected: bool</code>  <code>property</code>","text":"<p>Is Car Horn currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_car_horn_detection_on","title":"<code>is_car_horn_detection_on: bool</code>  <code>property</code>","text":"<p>Is Car Horn Detection available and enabled (camera will produce car horn smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_cmonx_currently_detected","title":"<code>is_cmonx_currently_detected: bool</code>  <code>property</code>","text":"<p>Is CO alarm currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_co_detection_on","title":"<code>is_co_detection_on: bool</code>  <code>property</code>","text":"<p>Is CO Alarm Detection available and enabled (camera will produce smoke smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_face_currently_detected","title":"<code>is_face_currently_detected: bool</code>  <code>property</code>","text":"<p>Is face currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_face_detection_on","title":"<code>is_face_detection_on: bool</code>  <code>property</code>","text":"<p>Is Face Detection available and enabled (camera will produce face license plate detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_face_detections_allowed","title":"<code>is_face_detections_allowed: bool</code>  <code>property</code>","text":"<p>Is face detections allowed for this camera?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_glass_break_currently_detected","title":"<code>is_glass_break_currently_detected: bool</code>  <code>property</code>","text":"<p>Is Glass Break currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_glass_break_detection_on","title":"<code>is_glass_break_detection_on: bool</code>  <code>property</code>","text":"<p>Is Glass Break available and enabled (camera will produce glass break smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_ir_led_slider_enabled","title":"<code>is_ir_led_slider_enabled: bool</code>  <code>property</code>","text":"<p>Return if IR LED custom slider is enabled.</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_license_plate_currently_detected","title":"<code>is_license_plate_currently_detected: bool</code>  <code>property</code>","text":"<p>Is license plate currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_license_plate_detection_on","title":"<code>is_license_plate_detection_on: bool</code>  <code>property</code>","text":"<p>Is License Plate Detection available and enabled (camera will produce face license plate detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_license_plate_detections_allowed","title":"<code>is_license_plate_detections_allowed: bool</code>  <code>property</code>","text":"<p>Is license plate detections allowed for this camera?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_motion_currently_detected","title":"<code>is_motion_currently_detected: bool</code>  <code>property</code>","text":"<p>Is motion currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_motion_detection_on","title":"<code>is_motion_detection_on: bool</code>  <code>property</code>","text":"<p>Is Motion Detection available and enabled (camera will produce motion events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_package_currently_detected","title":"<code>is_package_currently_detected: bool</code>  <code>property</code>","text":"<p>Is package currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_package_detection_on","title":"<code>is_package_detection_on: bool</code>  <code>property</code>","text":"<p>Is Package Detection available and enabled (camera will produce package smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_person_currently_detected","title":"<code>is_person_currently_detected: bool</code>  <code>property</code>","text":"<p>Is person currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_person_detection_on","title":"<code>is_person_detection_on: bool</code>  <code>property</code>","text":"<p>Is Person Detection available and enabled (camera will produce person smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_person_tracking_enabled","title":"<code>is_person_tracking_enabled: bool</code>  <code>property</code>","text":"<p>Is person tracking enabled</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_recording_enabled","title":"<code>is_recording_enabled: bool</code>  <code>property</code>","text":"<p>Is recording footage/events from the camera enabled?</p> <p>If recording is not enabled, cameras will not produce any footage, thumbnails, motion/smart detection events.</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_siren_currently_detected","title":"<code>is_siren_currently_detected: bool</code>  <code>property</code>","text":"<p>Is Siren currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_siren_detection_on","title":"<code>is_siren_detection_on: bool</code>  <code>property</code>","text":"<p>Is Siren Detection available and enabled (camera will produce siren smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_smart_currently_detected","title":"<code>is_smart_currently_detected: bool</code>  <code>property</code>","text":"<p>Is smart detection currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_smart_detections_allowed","title":"<code>is_smart_detections_allowed: bool</code>  <code>property</code>","text":"<p>Is smart detections allowed for this camera?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_smoke_currently_detected","title":"<code>is_smoke_currently_detected: bool</code>  <code>property</code>","text":"<p>Is smoke alarm currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_smoke_detection_on","title":"<code>is_smoke_detection_on: bool</code>  <code>property</code>","text":"<p>Is Smoke Alarm Detection available and enabled (camera will produce smoke smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_speaking_currently_detected","title":"<code>is_speaking_currently_detected: bool</code>  <code>property</code>","text":"<p>Is Speaking currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_speaking_detection_on","title":"<code>is_speaking_detection_on: bool</code>  <code>property</code>","text":"<p>Is Speaking Detection available and enabled (camera will produce speaking smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_vehicle_currently_detected","title":"<code>is_vehicle_currently_detected: bool</code>  <code>property</code>","text":"<p>Is vehicle currently being detected</p>"},{"location":"api/#pyunifiprotect.data.Camera.is_vehicle_detection_on","title":"<code>is_vehicle_detection_on: bool</code>  <code>property</code>","text":"<p>Is Vehicle Detection available and enabled (camera will produce vehicle smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_animal_detect","title":"<code>last_animal_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last animal smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_animal_detect_event","title":"<code>last_animal_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last animal smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_baby_cry_detect","title":"<code>last_baby_cry_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last Baby Cry smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_baby_cry_detect_event","title":"<code>last_baby_cry_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last Baby Cry smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_bark_detect","title":"<code>last_bark_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last Bark smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_bark_detect_event","title":"<code>last_bark_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last Bark smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_car_alarm_detect","title":"<code>last_car_alarm_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last Car Alarm smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_car_alarm_detect_event","title":"<code>last_car_alarm_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last Car Alarm smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_car_horn_detect","title":"<code>last_car_horn_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last Car Horn smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_car_horn_detect_event","title":"<code>last_car_horn_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last Car Horn smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_cmonx_detect","title":"<code>last_cmonx_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last CO alarm smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_cmonx_detect_event","title":"<code>last_cmonx_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last CO alarm smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_face_detect","title":"<code>last_face_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last face plate smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_face_detect_event","title":"<code>last_face_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last license plate smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_glass_break_detect","title":"<code>last_glass_break_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last Glass Break smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_glass_break_detect_event","title":"<code>last_glass_break_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last Glass Break smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_license_plate_detect","title":"<code>last_license_plate_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last license plate smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_license_plate_detect_event","title":"<code>last_license_plate_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last license plate smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_package_detect","title":"<code>last_package_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last package smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_package_detect_event","title":"<code>last_package_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last package smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_person_detect","title":"<code>last_person_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last person smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_person_detect_event","title":"<code>last_person_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last person smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_siren_detect","title":"<code>last_siren_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last Siren smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_siren_detect_event","title":"<code>last_siren_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last Siren smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_smart_audio_detect_event","title":"<code>last_smart_audio_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last smart audio detect event id.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_smart_detect_event","title":"<code>last_smart_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last smart detect event id.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_smoke_detect","title":"<code>last_smoke_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last smoke smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_smoke_detect_event","title":"<code>last_smoke_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last person smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_speaking_detect","title":"<code>last_speaking_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last Speaking smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_speaking_detect_event","title":"<code>last_speaking_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last Speaking smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_vehicle_detect","title":"<code>last_vehicle_detect: Optional[datetime]</code>  <code>property</code>","text":"<p>Get the last vehicle smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.last_vehicle_detect_event","title":"<code>last_vehicle_detect_event: Optional[Event]</code>  <code>property</code>","text":"<p>Get the last vehicle smart detection event.</p>"},{"location":"api/#pyunifiprotect.data.Camera.create_ptz_patrol","title":"<code>create_ptz_patrol(*, name: str, preset_slots: list[int], duration: int = 10) -&gt; PTZPatrol</code>  <code>async</code>","text":"<p>Create PTZ Patrol.</p> <p>Duration is how long camera waits at each preset in seconds. Must be between 10 and 60.</p>"},{"location":"api/#pyunifiprotect.data.Camera.create_ptz_preset","title":"<code>create_ptz_preset(*, name: str) -&gt; PTZPreset</code>  <code>async</code>","text":"<p>Create PTZ Preset for camera based on current camera settings.</p>"},{"location":"api/#pyunifiprotect.data.Camera.create_talkback_stream","title":"<code>create_talkback_stream(content_url: str, ffmpeg_path: Optional[Path] = None) -&gt; TalkbackStream</code>","text":"<p>Creates a subprocess to play audio to a camera through its speaker.</p> <p>Requires ffmpeg to use.</p> Text Only<pre><code>content_url: Either a URL accessible by python or a path to a file (ffmepg's `-i` parameter)\nffmpeg_path: Optional path to ffmpeg binary\n</code></pre> <p>Use either <code>await stream.run_until_complete()</code> or <code>await stream.start()</code> to start subprocess command after getting the stream.</p> <p><code>.play_audio()</code> is a helper that wraps this method and automatically runs the subprocess as well</p>"},{"location":"api/#pyunifiprotect.data.Camera.delete_ptz_patrol","title":"<code>delete_ptz_patrol(slot: int) -&gt; None</code>  <code>async</code>","text":"<p>Delete PTZ Patrol.</p>"},{"location":"api/#pyunifiprotect.data.Camera.delete_ptz_preset","title":"<code>delete_ptz_preset(*, slot: int) -&gt; None</code>  <code>async</code>","text":"<p>Delete PTZ preset for camera.</p>"},{"location":"api/#pyunifiprotect.data.Camera.get_active_ptz_patrol","title":"<code>get_active_ptz_patrol() -&gt; PTZPatrol | None</code>  <code>async</code>","text":"<p>Get the current active PTZ Patrol.</p>"},{"location":"api/#pyunifiprotect.data.Camera.get_last_smart_audio_detect_event","title":"<code>get_last_smart_audio_detect_event(smart_type: SmartDetectAudioType) -&gt; Optional[Event]</code>","text":"<p>Get the last smart audio detect event for given type.</p>"},{"location":"api/#pyunifiprotect.data.Camera.get_last_smart_detect_event","title":"<code>get_last_smart_detect_event(smart_type: SmartDetectObjectType) -&gt; Optional[Event]</code>","text":"<p>Get the last smart detect event for given type.</p>"},{"location":"api/#pyunifiprotect.data.Camera.get_package_snapshot","title":"<code>get_package_snapshot(width: Optional[int] = None, height: Optional[int] = None, dt: Optional[datetime] = None) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Gets snapshot from the package camera.</p> <p>Datetime of screenshot is approximate. It may be +/- a few seconds.</p>"},{"location":"api/#pyunifiprotect.data.Camera.get_ptz_home","title":"<code>get_ptz_home() -&gt; PTZPreset</code>  <code>async</code>","text":"<p>Get PTZ home preset (-1).</p>"},{"location":"api/#pyunifiprotect.data.Camera.get_ptz_patrols","title":"<code>get_ptz_patrols() -&gt; list[PTZPatrol]</code>  <code>async</code>","text":"<p>Get PTZ Patrols.</p>"},{"location":"api/#pyunifiprotect.data.Camera.get_ptz_position","title":"<code>get_ptz_position() -&gt; PTZPosition</code>  <code>async</code>","text":"<p>Get current PTZ Position.</p>"},{"location":"api/#pyunifiprotect.data.Camera.get_ptz_presets","title":"<code>get_ptz_presets() -&gt; list[PTZPreset]</code>  <code>async</code>","text":"<p>Get PTZ Presets for camera.</p>"},{"location":"api/#pyunifiprotect.data.Camera.get_snapshot","title":"<code>get_snapshot(width: Optional[int] = None, height: Optional[int] = None, dt: Optional[datetime] = None) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Gets snapshot for camera.</p> <p>Datetime of screenshot is approximate. It may be +/- a few seconds.</p>"},{"location":"api/#pyunifiprotect.data.Camera.get_video","title":"<code>get_video(start: datetime, end: datetime, channel_index: int = 0, output_file: Optional[Path] = None, iterator_callback: Optional[IteratorCallback] = None, progress_callback: Optional[ProgressCallback] = None, chunk_size: int = 65536, fps: Optional[int] = None) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Exports MP4 video from a given camera at a specific time.</p> <p>Start/End of video export are approximate. It may be +/- a few seconds.</p> <p>It is recommended to provide a output file or progress callback for larger video clips, otherwise the full video must be downloaded to memory before being written.</p> <p>Providing the <code>fps</code> parameter creates a \"timelapse\" export wtih the given FPS value. Protect app gives the options for 60x (fps=4), 120x (fps=8), 300x (fps=20), and 600x (fps=40).</p>"},{"location":"api/#pyunifiprotect.data.Camera.goto_ptz_slot","title":"<code>goto_ptz_slot(*, slot: int) -&gt; None</code>  <code>async</code>","text":"<p>Goto PTZ slot position.</p> <p>-1 is Home slot.</p>"},{"location":"api/#pyunifiprotect.data.Camera.play_audio","title":"<code>play_audio(content_url: str, ffmpeg_path: Optional[Path] = None, blocking: bool = True) -&gt; None</code>  <code>async</code>","text":"<p>Plays audio to a camera through its speaker.</p> <p>Requires ffmpeg to use.</p> Text Only<pre><code>content_url: Either a URL accessible by python or a path to a file (ffmepg's `-i` parameter)\nffmpeg_path: Optional path to ffmpeg binary\nblocking: Awaits stream completion and logs stdout/stderr\n</code></pre>"},{"location":"api/#pyunifiprotect.data.Camera.ptz_center","title":"<code>ptz_center(*, x: int, y: int, z: int) -&gt; None</code>  <code>async</code>","text":"<p>Center PTZ Camera on point in viewport.</p> <p>x, y, z values range from 0 to 1000.</p> <p>x, y are relative coords for the current viewport:     * (0, 0) is top left     * (500, 500) is the center     * (1000, 1000) is the bottom right</p> <p>z value is zoom, but since it is capped at 1000, probably better to use <code>ptz_zoom</code>.</p>"},{"location":"api/#pyunifiprotect.data.Camera.ptz_relative_move","title":"<code>ptz_relative_move(*, pan: float, tilt: float, pan_speed: int = 10, tilt_speed: int = 10, scale: int = 0, use_native: bool = False) -&gt; None</code>  <code>async</code>","text":"<p>Move PTZ relative to current position.</p> <p>Pan/tilt values vary from camera to camera, but for G4 PTZ:     * Pan values range from 0\u00b0 and go to 360\u00b0/0\u00b0     * Tilt values range from -20\u00b0 and go to 90\u00b0</p> <p>Relative positions cannot move more then 4095 steps at a time in any direction.</p> <p>For the G4 PTZ, 4095 steps is ~41\u00b0 for pan and ~45\u00b0 for tilt.</p> <p><code>use_native</code> lets you use the native step values instead of degrees.</p>"},{"location":"api/#pyunifiprotect.data.Camera.ptz_zoom","title":"<code>ptz_zoom(*, zoom: float, speed: int = 100, use_native: bool = False) -&gt; None</code>  <code>async</code>","text":"<p>Zoom PTZ Camera.</p> <p>Zoom levels vary from camera to camera, but for G4 PTZ it goes from 1x to 22x.</p> <p>Zoom speed seems to range from 0 to 100. Any value over 100 results in a speed of 0.</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_animal_detection","title":"<code>set_animal_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles animal smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_baby_cry_detection","title":"<code>set_baby_cry_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles baby_cry smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_bark_detection","title":"<code>set_bark_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles bark smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_camera_zoom","title":"<code>set_camera_zoom(level: int) -&gt; None</code>  <code>async</code>","text":"<p>Sets zoom level for camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_car_alarm_detection","title":"<code>set_car_alarm_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles car_alarm smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_car_horn_detection","title":"<code>set_car_horn_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles car_horn smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_chime_duration","title":"<code>set_chime_duration(duration: timedelta | float) -&gt; None</code>  <code>async</code>","text":"<p>Sets chime duration for doorbell. Requires camera to be a doorbell</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_chime_type","title":"<code>set_chime_type(chime_type: ChimeType) -&gt; None</code>  <code>async</code>","text":"<p>Sets chime type for doorbell. Requires camera to be a doorbell</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_cmonx_detection","title":"<code>set_cmonx_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles smoke smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_color_night_vision","title":"<code>set_color_night_vision(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets Color Night Vision on camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_face_detection","title":"<code>set_face_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles face smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_glass_break_detection","title":"<code>set_glass_break_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles glass_break smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_hdr","title":"<code>set_hdr(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets HDR (High Dynamic Range) on camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_hdr_mode","title":"<code>set_hdr_mode(mode: Literal['auto', 'off', 'always']) -&gt; None</code>  <code>async</code>","text":"<p>Sets HDR mode similar to how Protect interface works.</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_icr_custom_lux","title":"<code>set_icr_custom_lux(value: ICRLuxValue) -&gt; None</code>  <code>async</code>","text":"<p>Set ICRCustomValue from lux value.</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_ir_led_model","title":"<code>set_ir_led_model(mode: IRLEDMode) -&gt; None</code>  <code>async</code>","text":"<p>Sets IR LED mode on camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_lcd_text","title":"<code>set_lcd_text(text_type: Optional[DoorbellMessageType], text: Optional[str] = None, reset_at: Union[None, datetime, DEFAULT_TYPE] = None) -&gt; None</code>  <code>async</code>","text":"<p>Sets doorbell LCD text. Requires camera to be doorbell</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_license_plate_detection","title":"<code>set_license_plate_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles license plate smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_mic_volume","title":"<code>set_mic_volume(level: int) -&gt; None</code>  <code>async</code>","text":"<p>Sets the mic sensitivity level on camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_motion_detection","title":"<code>set_motion_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets motion detection on camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_osd_bitrate","title":"<code>set_osd_bitrate(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets whether camera bitrate is in the On Screen Display</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_osd_date","title":"<code>set_osd_date(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets whether current date is in the On Screen Display</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_osd_logo","title":"<code>set_osd_logo(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets whether the UniFi logo is in the On Screen Display</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_osd_name","title":"<code>set_osd_name(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets whether camera name is in the On Screen Display</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_package_detection","title":"<code>set_package_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles package smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_person_detection","title":"<code>set_person_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles person smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_person_track","title":"<code>set_person_track(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets person tracking on camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_privacy","title":"<code>set_privacy(enabled: bool, mic_level: Optional[int] = None, recording_mode: Optional[RecordingMode] = None) -&gt; None</code>  <code>async</code>","text":"<p>Adds/removes a privacy zone that blacks out the whole camera.</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_ptz_home","title":"<code>set_ptz_home() -&gt; PTZPreset</code>  <code>async</code>","text":"<p>Get PTZ home preset (-1) to current position.</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_recording_mode","title":"<code>set_recording_mode(mode: RecordingMode) -&gt; None</code>  <code>async</code>","text":"<p>Sets recording mode on camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_siren_detection","title":"<code>set_siren_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles siren smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_smart_audio_detect_types","title":"<code>set_smart_audio_detect_types(types: list[SmartDetectAudioType]) -&gt; None</code>  <code>async</code>","text":"<p>Sets current enabled smart audio detection types. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_smart_detect_types","title":"<code>set_smart_detect_types(types: list[SmartDetectObjectType]) -&gt; None</code>  <code>async</code>","text":"<p>Sets current enabled smart detection types. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_smoke_detection","title":"<code>set_smoke_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles smoke smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_speaker_volume","title":"<code>set_speaker_volume(level: int) -&gt; None</code>  <code>async</code>","text":"<p>Sets the speaker sensitivity level on camera. Requires camera to have speakers</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_speaking_detection","title":"<code>set_speaking_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles speaking smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_status_light","title":"<code>set_status_light(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets status indicicator light on camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_system_sounds","title":"<code>set_system_sounds(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets system sound playback through speakers. Requires camera to have speakers</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_vehicle_detection","title":"<code>set_vehicle_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Toggles vehicle smart detection. Requires camera to have smart detection</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_video_mode","title":"<code>set_video_mode(mode: VideoMode) -&gt; None</code>  <code>async</code>","text":"<p>Sets video mode on camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.set_wdr_level","title":"<code>set_wdr_level(level: int) -&gt; None</code>  <code>async</code>","text":"<p>Sets WDR (Wide Dynamic Range) on camera</p>"},{"location":"api/#pyunifiprotect.data.Camera.start_patrol_ptz_camera","title":"<code>start_patrol_ptz_camera(slot: int) -&gt; None</code>  <code>async</code>","text":"<p>Start a PTZ Patrol.</p>"},{"location":"api/#pyunifiprotect.data.Camera.stop_audio","title":"<code>stop_audio() -&gt; None</code>  <code>async</code>","text":"<p>Stop currently playing audio.</p>"},{"location":"api/#pyunifiprotect.data.Camera.wait_until_audio_completes","title":"<code>wait_until_audio_completes() -&gt; None</code>  <code>async</code>","text":"<p>Awaits stream completion of audio and logs stdout/stderr.</p>"},{"location":"api/#pyunifiprotect.data.Chime","title":"<code>Chime</code>","text":"<p>               Bases: <code>ProtectAdoptableDeviceModel</code></p>"},{"location":"api/#pyunifiprotect.data.Chime.cameras","title":"<code>cameras: list[Camera]</code>  <code>property</code>","text":"<p>Paired Cameras for chime</p>"},{"location":"api/#pyunifiprotect.data.Chime.add_camera","title":"<code>add_camera(camera: Camera) -&gt; None</code>  <code>async</code>","text":"<p>Adds new paired camera to chime</p>"},{"location":"api/#pyunifiprotect.data.Chime.play","title":"<code>play(*, volume: int | None = None, repeat_times: int | None = None) -&gt; None</code>  <code>async</code>","text":"<p>Plays chime tone</p>"},{"location":"api/#pyunifiprotect.data.Chime.play_buzzer","title":"<code>play_buzzer() -&gt; None</code>  <code>async</code>","text":"<p>Plays chime buzzer</p>"},{"location":"api/#pyunifiprotect.data.Chime.remove_camera","title":"<code>remove_camera(camera: Camera) -&gt; None</code>  <code>async</code>","text":"<p>Removes paired camera from chime</p>"},{"location":"api/#pyunifiprotect.data.Chime.set_repeat_times","title":"<code>set_repeat_times(value: int) -&gt; None</code>  <code>async</code>","text":"<p>Set repeat times on chime.</p>"},{"location":"api/#pyunifiprotect.data.Chime.set_repeat_times_for_camera","title":"<code>set_repeat_times_for_camera(camera: Camera, value: int) -&gt; None</code>  <code>async</code>","text":"<p>Set repeat times on chime for specific camera.</p>"},{"location":"api/#pyunifiprotect.data.Chime.set_volume","title":"<code>set_volume(level: int) -&gt; None</code>  <code>async</code>","text":"<p>Set the volume on chime.</p>"},{"location":"api/#pyunifiprotect.data.Chime.set_volume_for_camera","title":"<code>set_volume_for_camera(camera: Camera, level: int) -&gt; None</code>  <code>async</code>","text":"<p>Set the volume on chime for specific camera.</p>"},{"location":"api/#pyunifiprotect.data.Doorlock","title":"<code>Doorlock</code>","text":"<p>               Bases: <code>ProtectAdoptableDeviceModel</code></p>"},{"location":"api/#pyunifiprotect.data.Doorlock.camera","title":"<code>camera: Optional[Camera]</code>  <code>property</code>","text":"<p>Paired Camera will always be none if no camera is paired</p>"},{"location":"api/#pyunifiprotect.data.Doorlock.calibrate","title":"<code>calibrate() -&gt; None</code>  <code>async</code>","text":"<p>Calibrate the doorlock.</p> <p>Door must be open and lock unlocked.</p>"},{"location":"api/#pyunifiprotect.data.Doorlock.close_lock","title":"<code>close_lock() -&gt; None</code>  <code>async</code>","text":"<p>Close doorlock (lock)</p>"},{"location":"api/#pyunifiprotect.data.Doorlock.open_lock","title":"<code>open_lock() -&gt; None</code>  <code>async</code>","text":"<p>Open doorlock (unlock)</p>"},{"location":"api/#pyunifiprotect.data.Doorlock.set_auto_close_time","title":"<code>set_auto_close_time(duration: timedelta) -&gt; None</code>  <code>async</code>","text":"<p>Sets the auto-close time for doorlock. 0 seconds = disabled.</p>"},{"location":"api/#pyunifiprotect.data.Doorlock.set_paired_camera","title":"<code>set_paired_camera(camera: Optional[Camera]) -&gt; None</code>  <code>async</code>","text":"<p>Sets the camera paired with the sensor</p>"},{"location":"api/#pyunifiprotect.data.Doorlock.set_status_light","title":"<code>set_status_light(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets the status indicator light for the doorlock</p>"},{"location":"api/#pyunifiprotect.data.Event","title":"<code>Event</code>","text":"<p>               Bases: <code>ProtectModelWithId</code></p>"},{"location":"api/#pyunifiprotect.data.Event.get_animated_thumbnail","title":"<code>get_animated_thumbnail(width: Optional[int] = None, height: Optional[int] = None, *, speedup: int = 10) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Gets animated thumbnail for event</p>"},{"location":"api/#pyunifiprotect.data.Event.get_heatmap","title":"<code>get_heatmap() -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Gets heatmap for event</p>"},{"location":"api/#pyunifiprotect.data.Event.get_smart_detect_track","title":"<code>get_smart_detect_track() -&gt; SmartDetectTrack</code>  <code>async</code>","text":"<p>Gets smart detect track for given smart detect event.</p> <p>If event is not a smart detect event, it will raise a <code>BadRequest</code></p>"},{"location":"api/#pyunifiprotect.data.Event.get_smart_detect_zones","title":"<code>get_smart_detect_zones() -&gt; dict[int, CameraZone]</code>  <code>async</code>","text":"<p>Gets the triggering zones for the smart detection</p>"},{"location":"api/#pyunifiprotect.data.Event.get_thumbnail","title":"<code>get_thumbnail(width: Optional[int] = None, height: Optional[int] = None) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Gets thumbnail for event</p>"},{"location":"api/#pyunifiprotect.data.Event.get_video","title":"<code>get_video(channel_index: int = 0, output_file: Optional[Path] = None, iterator_callback: Optional[IteratorCallback] = None, progress_callback: Optional[ProgressCallback] = None, chunk_size: int = 65536) -&gt; Optional[bytes]</code>  <code>async</code>","text":"<p>Get the MP4 video clip for this given event</p> Text Only<pre><code>channel_index: index of `CameraChannel` on the camera to use to retrieve video from\n</code></pre> <p>Will raise an exception if event does not have a camera, end time or the channel index is wrong.</p>"},{"location":"api/#pyunifiprotect.data.FixSizeOrderedDict","title":"<code>FixSizeOrderedDict</code>","text":"<p>               Bases: <code>dict[KT, VT]</code></p> <p>A fixed size ordered dict.</p>"},{"location":"api/#pyunifiprotect.data.FixSizeOrderedDict.__init__","title":"<code>__init__(*args: Any, max_size: int = 0, **kwargs: Any) -&gt; None</code>","text":"<p>Create the FixSizeOrderedDict.</p>"},{"location":"api/#pyunifiprotect.data.FixSizeOrderedDict.__setitem__","title":"<code>__setitem__(key: KT, value: VT) -&gt; None</code>","text":"<p>Set an update up to the max size.</p>"},{"location":"api/#pyunifiprotect.data.Light","title":"<code>Light</code>","text":"<p>               Bases: <code>ProtectMotionDeviceModel</code></p>"},{"location":"api/#pyunifiprotect.data.Light.camera","title":"<code>camera: Optional[Camera]</code>  <code>property</code>","text":"<p>Paired Camera will always be none if no camera is paired</p>"},{"location":"api/#pyunifiprotect.data.Light.set_duration","title":"<code>set_duration(duration: timedelta) -&gt; None</code>  <code>async</code>","text":"<p>Sets motion sensitivity</p>"},{"location":"api/#pyunifiprotect.data.Light.set_led_level","title":"<code>set_led_level(led_level: int) -&gt; None</code>  <code>async</code>","text":"<p>Sets the LED level for the light</p>"},{"location":"api/#pyunifiprotect.data.Light.set_light","title":"<code>set_light(enabled: bool, led_level: Optional[int] = None) -&gt; None</code>  <code>async</code>","text":"<p>Force turns on/off the light</p>"},{"location":"api/#pyunifiprotect.data.Light.set_light_settings","title":"<code>set_light_settings(mode: LightModeType, enable_at: Optional[LightModeEnableType] = None, duration: Optional[timedelta] = None, sensitivity: Optional[int] = None) -&gt; None</code>  <code>async</code>","text":"<p>Updates various Light settings.</p> Text Only<pre><code>mode: Light trigger mode\nenable_at: Then the light automatically turns on by itself\nduration: How long the light should remain on after motion, must be timedelta between 15s and 900s\nsensitivity: PIR Motion sensitivity\n</code></pre>"},{"location":"api/#pyunifiprotect.data.Light.set_paired_camera","title":"<code>set_paired_camera(camera: Optional[Camera]) -&gt; None</code>  <code>async</code>","text":"<p>Sets the camera paired with the light</p>"},{"location":"api/#pyunifiprotect.data.Light.set_sensitivity","title":"<code>set_sensitivity(sensitivity: int) -&gt; None</code>  <code>async</code>","text":"<p>Sets motion sensitivity</p>"},{"location":"api/#pyunifiprotect.data.Light.set_status_light","title":"<code>set_status_light(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets the status indicator light for the light</p>"},{"location":"api/#pyunifiprotect.data.Liveview","title":"<code>Liveview</code>","text":"<p>               Bases: <code>ProtectModelWithId</code></p>"},{"location":"api/#pyunifiprotect.data.Liveview.owner","title":"<code>owner: Optional[User]</code>  <code>property</code>","text":"<p>Owner of liveview.</p> <p>Will be none if the user only has read only access and it was not made by their user.</p>"},{"location":"api/#pyunifiprotect.data.NVR","title":"<code>NVR</code>","text":"<p>               Bases: <code>ProtectDeviceModel</code></p>"},{"location":"api/#pyunifiprotect.data.NVR.is_face_detections_enabled","title":"<code>is_face_detections_enabled: bool</code>  <code>property</code>","text":"<p>If smart detected enabled globally.</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_animal_detection_on","title":"<code>is_global_animal_detection_on: bool</code>  <code>property</code>","text":"<p>Is Animal Detection available and enabled (camera will produce package smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_baby_cry_detection_on","title":"<code>is_global_baby_cry_detection_on: bool</code>  <code>property</code>","text":"<p>Is Baby Cry Detection available and enabled (camera will produce baby cry smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_bark_detection_on","title":"<code>is_global_bark_detection_on: bool</code>  <code>property</code>","text":"<p>Is Bark Detection available and enabled (camera will produce barking smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_car_alarm_detection_on","title":"<code>is_global_car_alarm_detection_on: bool</code>  <code>property</code>","text":"<p>Is Car Alarm Detection available and enabled (camera will produce car alarm smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_car_horn_detection_on","title":"<code>is_global_car_horn_detection_on: bool</code>  <code>property</code>","text":"<p>Is Car Horn Detection available and enabled (camera will produce car horn smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_co_detection_on","title":"<code>is_global_co_detection_on: bool</code>  <code>property</code>","text":"<p>Is CO Alarm Detection available and enabled (camera will produce smoke smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_glass_break_detection_on","title":"<code>is_global_glass_break_detection_on: bool</code>  <code>property</code>","text":"<p>Is Glass Break available and enabled (camera will produce glass break smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_license_plate_detection_on","title":"<code>is_global_license_plate_detection_on: bool</code>  <code>property</code>","text":"<p>Is License Plate Detection available and enabled (camera will produce face license plate detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_package_detection_on","title":"<code>is_global_package_detection_on: bool</code>  <code>property</code>","text":"<p>Is Package Detection available and enabled (camera will produce package smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_person_detection_on","title":"<code>is_global_person_detection_on: bool</code>  <code>property</code>","text":"<p>Is Person Detection available and enabled (camera will produce person smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_person_tracking_enabled","title":"<code>is_global_person_tracking_enabled: bool</code>  <code>property</code>","text":"<p>Is person tracking enabled</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_recording_enabled","title":"<code>is_global_recording_enabled: bool</code>  <code>property</code>","text":"<p>Is recording footage/events from the camera enabled?</p> <p>If recording is not enabled, cameras will not produce any footage, thumbnails, motion/smart detection events.</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_siren_detection_on","title":"<code>is_global_siren_detection_on: bool</code>  <code>property</code>","text":"<p>Is Siren Detection available and enabled (camera will produce siren smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_smoke_detection_on","title":"<code>is_global_smoke_detection_on: bool</code>  <code>property</code>","text":"<p>Is Smoke Alarm Detection available and enabled (camera will produce smoke smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_speaking_detection_on","title":"<code>is_global_speaking_detection_on: bool</code>  <code>property</code>","text":"<p>Is Speaking Detection available and enabled (camera will produce speaking smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_global_vehicle_detection_on","title":"<code>is_global_vehicle_detection_on: bool</code>  <code>property</code>","text":"<p>Is Vehicle Detection available and enabled (camera will produce vehicle smart detection events)?</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_license_plate_detections_enabled","title":"<code>is_license_plate_detections_enabled: bool</code>  <code>property</code>","text":"<p>If smart detected enabled globally.</p>"},{"location":"api/#pyunifiprotect.data.NVR.is_smart_detections_enabled","title":"<code>is_smart_detections_enabled: bool</code>  <code>property</code>","text":"<p>If smart detected enabled globally.</p>"},{"location":"api/#pyunifiprotect.data.NVR.vault_cameras","title":"<code>vault_cameras: list[Camera]</code>  <code>property</code>","text":"<p>Vault Cameras for NVR</p>"},{"location":"api/#pyunifiprotect.data.NVR.add_custom_doorbell_message","title":"<code>add_custom_doorbell_message(message: str) -&gt; None</code>  <code>async</code>","text":"<p>Adds custom doorbell message</p>"},{"location":"api/#pyunifiprotect.data.NVR.get_is_prerelease","title":"<code>get_is_prerelease() -&gt; bool</code>  <code>async</code>","text":"<p>Get if current version of Protect is a prerelease version.</p>"},{"location":"api/#pyunifiprotect.data.NVR.reboot","title":"<code>reboot() -&gt; None</code>  <code>async</code>","text":"<p>Reboots the NVR</p>"},{"location":"api/#pyunifiprotect.data.NVR.remove_custom_doorbell_message","title":"<code>remove_custom_doorbell_message(message: str) -&gt; None</code>  <code>async</code>","text":"<p>Removes custom doorbell message</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_analytics","title":"<code>set_analytics(value: AnalyticsOption) -&gt; None</code>  <code>async</code>","text":"<p>Sets analytics collection for NVR</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_anonymous_analytics","title":"<code>set_anonymous_analytics(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Enables or disables anonymous analystics for NVR</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_default_doorbell_message","title":"<code>set_default_doorbell_message(message: str) -&gt; None</code>  <code>async</code>","text":"<p>Sets default doorbell message</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_default_reset_timeout","title":"<code>set_default_reset_timeout(timeout: timedelta) -&gt; None</code>  <code>async</code>","text":"<p>Sets the default message reset timeout</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_face_recognition","title":"<code>set_face_recognition(value: bool) -&gt; None</code>  <code>async</code>","text":"<p>Set if face detections are enabled. Requires smart detections to be enabled.</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_global_motion_detection","title":"<code>set_global_motion_detection(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets motion detection on camera</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_global_osd_bitrate","title":"<code>set_global_osd_bitrate(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets whether camera bitrate is in the On Screen Display</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_global_osd_date","title":"<code>set_global_osd_date(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets whether current date is in the On Screen Display</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_global_osd_logo","title":"<code>set_global_osd_logo(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets whether the UniFi logo is in the On Screen Display</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_global_osd_name","title":"<code>set_global_osd_name(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets whether camera name is in the On Screen Display</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_global_recording_mode","title":"<code>set_global_recording_mode(mode: RecordingMode) -&gt; None</code>  <code>async</code>","text":"<p>Sets recording mode on camera</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_insights","title":"<code>set_insights(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets analytics collection for NVR</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_license_plate_recognition","title":"<code>set_license_plate_recognition(value: bool) -&gt; None</code>  <code>async</code>","text":"<p>Set if license plate detections are enabled. Requires smart detections to be enabled.</p>"},{"location":"api/#pyunifiprotect.data.NVR.set_smart_detections","title":"<code>set_smart_detections(value: bool) -&gt; None</code>  <code>async</code>","text":"<p>Set if smart detections are enabled.</p>"},{"location":"api/#pyunifiprotect.data.NVR.update_all_messages","title":"<code>update_all_messages() -&gt; None</code>","text":"<p>Updates doorbell_settings.all_messages after adding/removing custom message</p>"},{"location":"api/#pyunifiprotect.data.PTZPatrol","title":"<code>PTZPatrol</code>","text":"<p>               Bases: <code>ProtectModel</code></p>"},{"location":"api/#pyunifiprotect.data.PTZPatrol.camera","title":"<code>camera: Camera</code>  <code>property</code>","text":"<p>Paired Camera will always be none if no camera is paired</p>"},{"location":"api/#pyunifiprotect.data.ProtectAdoptableDeviceModel","title":"<code>ProtectAdoptableDeviceModel</code>","text":"<p>               Bases: <code>ProtectDeviceModel</code></p>"},{"location":"api/#pyunifiprotect.data.ProtectAdoptableDeviceModel.is_adopted_by_us","title":"<code>is_adopted_by_us: bool</code>  <code>property</code>","text":"<p>Verifies device is adopted and controlled by this NVR.</p>"},{"location":"api/#pyunifiprotect.data.ProtectAdoptableDeviceModel.protect_url","title":"<code>protect_url: str</code>  <code>property</code>","text":"<p>UFP Web app URL for this device</p>"},{"location":"api/#pyunifiprotect.data.ProtectAdoptableDeviceModel.adopt","title":"<code>adopt(name: Optional[str] = None) -&gt; None</code>  <code>async</code>","text":"<p>Adopts a device</p>"},{"location":"api/#pyunifiprotect.data.ProtectAdoptableDeviceModel.get_changed","title":"<code>get_changed(data_before_changes: dict[str, Any]) -&gt; dict[str, Any]</code>","text":"<p>Gets dictionary of all changed fields</p>"},{"location":"api/#pyunifiprotect.data.ProtectAdoptableDeviceModel.reboot","title":"<code>reboot() -&gt; None</code>  <code>async</code>","text":"<p>Reboots an adopted device</p>"},{"location":"api/#pyunifiprotect.data.ProtectAdoptableDeviceModel.set_ssh","title":"<code>set_ssh(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets ssh status for protect device</p>"},{"location":"api/#pyunifiprotect.data.ProtectAdoptableDeviceModel.unadopt","title":"<code>unadopt() -&gt; None</code>  <code>async</code>","text":"<p>Unadopt/Unmanage adopted device</p>"},{"location":"api/#pyunifiprotect.data.ProtectBaseObject","title":"<code>ProtectBaseObject</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for building Python objects from UniFi Protect JSON.</p> <ul> <li>Provides <code>.unifi_dict_to_dict</code> to convert UFP JSON to a more Pythonic formatted dict (camel case to snake case)</li> <li>Add attrs with matching Pyhonic name and they will automatically be populated from the UFP JSON if passed in to the constructer</li> <li>Provides <code>.unifi_dict</code> to convert object back into UFP JSON</li> </ul>"},{"location":"api/#pyunifiprotect.data.ProtectBaseObject.api","title":"<code>api: ProtectApiClient</code>  <code>property</code>","text":"<p>ProtectApiClient that the UFP object was created with. If no API Client was passed in time of creation, will raise <code>BadRequest</code></p>"},{"location":"api/#pyunifiprotect.data.ProtectBaseObject.__init__","title":"<code>__init__(api: Optional[ProtectApiClient] = None, **data: Any) -&gt; None</code>","text":"<p>Base class for creating Python objects from UFP JSON data.</p> <p>Use the static method <code>.from_unifi_dict()</code> to create objects from UFP JSON data from then the main class constructor.</p>"},{"location":"api/#pyunifiprotect.data.ProtectBaseObject.dict_with_excludes","title":"<code>dict_with_excludes() -&gt; dict[str, Any]</code>","text":"<p>Returns a dict of the current object without any UFP objects converted to dicts.</p>"},{"location":"api/#pyunifiprotect.data.ProtectBaseObject.from_unifi_dict","title":"<code>from_unifi_dict(api: Optional[ProtectApiClient] = None, **data: Any) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Main constructor for <code>ProtectBaseObject</code></p> Text Only<pre><code>api: Optional reference to the ProtectAPIClient that created generated the UFP JSON\n**data: decoded UFP JSON\n</code></pre> <p><code>api</code> is is expected as a <code>@property</code>. If it is <code>None</code> and accessed, a <code>BadRequest</code> will be raised.</p> <p>API can be used for saving updates for the Protect object or fetching references to other objects (cameras, users, etc.)</p>"},{"location":"api/#pyunifiprotect.data.ProtectBaseObject.unifi_dict","title":"<code>unifi_dict(data: Optional[dict[str, Any]] = None, exclude: Optional[set[str]] = None) -&gt; dict[str, Any]</code>","text":"<p>Can either convert current Python object into UFP JSON dict or take the output of a <code>.dict()</code> call and convert it.</p> <ul> <li>Remaps items from <code>._get_unifi_remaps()</code> in reverse</li> <li>Converts snake_case to camelCase</li> <li>Automatically removes any ProtectApiClient instances that might still be in the data</li> <li>Automatically calls <code>.unifi_dict()</code> for any UFP Python objects that are detected</li> </ul> Text Only<pre><code>data: Optional output of `.dict()` for the Python object. If `None`, will call `.dict` first\nexclude: Optional set of fields to exclude from convert. Useful for subclassing and having custom\n    processing for dumping to UFP JSON data.\n</code></pre>"},{"location":"api/#pyunifiprotect.data.ProtectBaseObject.unifi_dict_to_dict","title":"<code>unifi_dict_to_dict(data: dict[str, Any]) -&gt; dict[str, Any]</code>  <code>classmethod</code>","text":"<p>Takes a decoded UFP JSON dict and converts it into a Python dict</p> <ul> <li>Remaps items from <code>._get_unifi_remaps()</code></li> <li>Converts camelCase keys to snake_case keys</li> <li>Injects ProtectAPIClient into any child UFP object Dicts</li> <li>Runs <code>.unifi_dict_to_dict</code> for any child UFP objects</li> </ul> Text Only<pre><code>data: decoded UFP JSON dict\n</code></pre>"},{"location":"api/#pyunifiprotect.data.ProtectBaseObject.update_from_dict","title":"<code>update_from_dict(data: dict[str, Any]) -&gt; ProtectObject</code>","text":"<p>Updates current object from a cleaned UFP JSON dict</p>"},{"location":"api/#pyunifiprotect.data.ProtectDeviceModel","title":"<code>ProtectDeviceModel</code>","text":"<p>               Bases: <code>ProtectModelWithId</code></p>"},{"location":"api/#pyunifiprotect.data.ProtectDeviceModel.set_name","title":"<code>set_name(name: str | None) -&gt; None</code>  <code>async</code>","text":"<p>Sets name for the device</p>"},{"location":"api/#pyunifiprotect.data.ProtectModel","title":"<code>ProtectModel</code>","text":"<p>               Bases: <code>ProtectBaseObject</code></p> <p>Base class for UFP objects with a <code>modelKey</code> attr. Provides <code>.from_unifi_dict()</code> static helper method for automatically decoding a <code>modelKey</code> object into the correct UFP object and type</p>"},{"location":"api/#pyunifiprotect.data.ProtectModelWithId","title":"<code>ProtectModelWithId</code>","text":"<p>               Bases: <code>ProtectModel</code></p>"},{"location":"api/#pyunifiprotect.data.ProtectModelWithId.emit_message","title":"<code>emit_message(updated: dict[str, Any]) -&gt; None</code>  <code>async</code>","text":"<p>Emites fake WS message for ProtectApiClient to process.</p>"},{"location":"api/#pyunifiprotect.data.ProtectModelWithId.queue_update","title":"<code>queue_update(callback: Callable[[], None]) -&gt; None</code>  <code>async</code>","text":"<p>Queues a device update.</p> <p>This allows aggregating devices updates so if multiple ones come in all at once, they can be combined in a single PATCH.</p>"},{"location":"api/#pyunifiprotect.data.ProtectModelWithId.revert_changes","title":"<code>revert_changes(data_before_changes: dict[str, Any]) -&gt; None</code>","text":"<p>Reverts current changes to device and resets it back to initial state</p>"},{"location":"api/#pyunifiprotect.data.ProtectModelWithId.save_device","title":"<code>save_device(data_before_changes: dict[str, Any], force_emit: bool = False, revert_on_fail: bool = True) -&gt; None</code>  <code>async</code>","text":"<p>Generates a diff for unsaved changed on the device and sends them back to UFP</p> <p>USE WITH CAUTION, updates all fields for the current object that have been changed. May have unexpected side effects.</p> <p>Tested updates have been added a methods on applicable devices.</p> Text Only<pre><code>force_emit: Emit a fake UFP WS message. Should only be use for when UFP does not properly emit a WS message\n</code></pre>"},{"location":"api/#pyunifiprotect.data.ProtectWSPayloadFormat","title":"<code>ProtectWSPayloadFormat</code>","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p> <p>Websocket Payload formats.</p>"},{"location":"api/#pyunifiprotect.data.RingSetting","title":"<code>RingSetting</code>","text":"<p>               Bases: <code>ProtectBaseObject</code></p>"},{"location":"api/#pyunifiprotect.data.RingSetting.camera","title":"<code>camera: Optional[Camera]</code>  <code>property</code>","text":"<p>Paired Camera will always be none if no camera is paired</p>"},{"location":"api/#pyunifiprotect.data.Sensor","title":"<code>Sensor</code>","text":"<p>               Bases: <code>ProtectAdoptableDeviceModel</code></p>"},{"location":"api/#pyunifiprotect.data.Sensor.camera","title":"<code>camera: Optional[Camera]</code>  <code>property</code>","text":"<p>Paired Camera will always be none if no camera is paired</p>"},{"location":"api/#pyunifiprotect.data.Sensor.clear_tamper","title":"<code>clear_tamper() -&gt; None</code>  <code>async</code>","text":"<p>Clears tamper status for sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.remove_humidity_safe_range","title":"<code>remove_humidity_safe_range() -&gt; None</code>  <code>async</code>","text":"<p>Removes the humidity safe range for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.remove_light_safe_range","title":"<code>remove_light_safe_range() -&gt; None</code>  <code>async</code>","text":"<p>Removes the light safe range for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.remove_temperature_safe_range","title":"<code>remove_temperature_safe_range() -&gt; None</code>  <code>async</code>","text":"<p>Removes the temperature safe range for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_alarm_status","title":"<code>set_alarm_status(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets the alarm detection type for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_humidity_safe_range","title":"<code>set_humidity_safe_range(low: float, high: float) -&gt; None</code>  <code>async</code>","text":"<p>Sets the humidity safe range for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_humidity_status","title":"<code>set_humidity_status(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets the humidity detection type for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_light_safe_range","title":"<code>set_light_safe_range(low: float, high: float) -&gt; None</code>  <code>async</code>","text":"<p>Sets the light safe range for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_light_status","title":"<code>set_light_status(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets the light detection type for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_motion_sensitivity","title":"<code>set_motion_sensitivity(sensitivity: int) -&gt; None</code>  <code>async</code>","text":"<p>Sets the motion sensitivity for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_motion_status","title":"<code>set_motion_status(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets the motion detection type for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_mount_type","title":"<code>set_mount_type(mount_type: MountType) -&gt; None</code>  <code>async</code>","text":"<p>Sets current mount type for sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_paired_camera","title":"<code>set_paired_camera(camera: Optional[Camera]) -&gt; None</code>  <code>async</code>","text":"<p>Sets the camera paired with the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_status_light","title":"<code>set_status_light(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets the status indicator light for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_temperature_safe_range","title":"<code>set_temperature_safe_range(low: float, high: float) -&gt; None</code>  <code>async</code>","text":"<p>Sets the temperature safe range for the sensor</p>"},{"location":"api/#pyunifiprotect.data.Sensor.set_temperature_status","title":"<code>set_temperature_status(enabled: bool) -&gt; None</code>  <code>async</code>","text":"<p>Sets the temperature detection type for the sensor</p>"},{"location":"api/#pyunifiprotect.data.User","title":"<code>User</code>","text":"<p>               Bases: <code>ProtectModelWithId</code></p>"},{"location":"api/#pyunifiprotect.data.User.groups","title":"<code>groups: list[Group]</code>  <code>property</code>","text":"<p>Groups the user is in</p> <p>Will always be empty if the user only has read only access.</p>"},{"location":"api/#pyunifiprotect.data.User.can","title":"<code>can(model: ModelType, node: PermissionNode, obj: Optional[ProtectModelWithId] = None) -&gt; bool</code>","text":"<p>Checks if a user can do a specific action</p>"},{"location":"api/#pyunifiprotect.data.Viewer","title":"<code>Viewer</code>","text":"<p>               Bases: <code>ProtectAdoptableDeviceModel</code></p>"},{"location":"api/#pyunifiprotect.data.Viewer.set_liveview","title":"<code>set_liveview(liveview: Liveview) -&gt; None</code>  <code>async</code>","text":"<p>Sets the liveview current set for the viewer</p> Text Only<pre><code>liveview: The liveview you want to set\n</code></pre>"},{"location":"api/#pyunifiprotect.data.create_from_unifi_dict","title":"<code>create_from_unifi_dict(data: dict[str, Any], api: Optional[ProtectApiClient] = None, klass: Optional[type[ProtectModel]] = None) -&gt; ProtectModel</code>","text":"<p>Helper method to read the <code>modelKey</code> from a UFP JSON dict and convert to currect Python class. Will raise <code>DataDecodeError</code> if the <code>modelKey</code> is for an unknown object.</p>"},{"location":"api/#exceptions-pyunifiprotectexception","title":"Exceptions (<code>pyunifiprotect.exception</code>)","text":""},{"location":"api/#pyunifiprotect.exceptions.BadRequest","title":"<code>BadRequest</code>","text":"<p>               Bases: <code>ClientError</code></p> <p>Invalid request from API Client</p>"},{"location":"api/#pyunifiprotect.exceptions.ClientError","title":"<code>ClientError</code>","text":"<p>               Bases: <code>UnifiProtectError</code></p> <p>Base Class for all other UniFi Protect client errors</p>"},{"location":"api/#pyunifiprotect.exceptions.DataDecodeError","title":"<code>DataDecodeError</code>","text":"<p>               Bases: <code>UnifiProtectError</code></p> <p>Exception raised when trying to decode a UniFi Protect object</p>"},{"location":"api/#pyunifiprotect.exceptions.Invalid","title":"<code>Invalid</code>","text":"<p>               Bases: <code>ClientError</code></p> <p>Invalid return from Authorization Request.</p>"},{"location":"api/#pyunifiprotect.exceptions.NotAuthorized","title":"<code>NotAuthorized</code>","text":"<p>               Bases: <code>PermissionError</code>, <code>BadRequest</code></p> <p>Wrong username, password or permission error.</p>"},{"location":"api/#pyunifiprotect.exceptions.NvrError","title":"<code>NvrError</code>","text":"<p>               Bases: <code>ClientError</code></p> <p>Other error.</p>"},{"location":"api/#pyunifiprotect.exceptions.StreamError","title":"<code>StreamError</code>","text":"<p>               Bases: <code>UnifiProtectError</code></p> <p>Expcetion raised when trying to stream content</p>"},{"location":"api/#pyunifiprotect.exceptions.UnifiProtectError","title":"<code>UnifiProtectError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all other UniFi Protect errors</p>"},{"location":"api/#pyunifiprotect.exceptions.WSDecodeError","title":"<code>WSDecodeError</code>","text":"<p>               Bases: <code>UnifiProtectError</code></p> <p>Exception raised when decoding Websocket packet</p>"},{"location":"api/#pyunifiprotect.exceptions.WSEncodeError","title":"<code>WSEncodeError</code>","text":"<p>               Bases: <code>UnifiProtectError</code></p> <p>Exception raised when encoding Websocket packet</p>"},{"location":"api/#stream-pyunifiprotectstream","title":"Stream (<code>pyunifiprotect.stream</code>)","text":""},{"location":"api/#utils-pyunifiprotectutils","title":"Utils (<code>pyunifiprotect.utils</code>)","text":""},{"location":"api/#pyunifiprotect.utils.clamp_value","title":"<code>clamp_value(value: float, step_size: float) -&gt; float</code>","text":"<p>Clamps value to multiples of step size.</p>"},{"location":"api/#pyunifiprotect.utils.convert_smart_audio_types","title":"<code>convert_smart_audio_types(items: Iterable[str]) -&gt; list[SmartDetectAudioType]</code>","text":"<p>Converts list of str into SmartDetectAudioType. Any unknown values will be ignored and logged.</p>"},{"location":"api/#pyunifiprotect.utils.convert_smart_types","title":"<code>convert_smart_types(items: Iterable[str]) -&gt; list[SmartDetectObjectType]</code>","text":"<p>Converts list of str into SmartDetectObjectType. Any unknown values will be ignored and logged.</p>"},{"location":"api/#pyunifiprotect.utils.convert_unifi_data","title":"<code>convert_unifi_data(value: Any, field: ModelField) -&gt; Any</code>","text":"<p>Converts value from UFP data into pydantic field class</p>"},{"location":"api/#pyunifiprotect.utils.convert_video_modes","title":"<code>convert_video_modes(items: Iterable[str]) -&gt; list[VideoMode]</code>","text":"<p>Converts list of str into VideoMode. Any unknown values will be ignored and logged.</p>"},{"location":"api/#pyunifiprotect.utils.decode_token_cookie","title":"<code>decode_token_cookie(token_cookie: Morsel[str]) -&gt; dict[str, Any] | None</code>","text":"<p>Decode a token cookie if it is still valid.</p>"},{"location":"api/#pyunifiprotect.utils.format_datetime","title":"<code>format_datetime(dt: Optional[datetime], default: Optional[str] = None) -&gt; Optional[str]</code>","text":"<p>Formats a datetime object in a consisent format</p>"},{"location":"api/#pyunifiprotect.utils.format_duration","title":"<code>format_duration(duration: timedelta) -&gt; str</code>","text":"<p>Formats a timedelta as a string.</p>"},{"location":"api/#pyunifiprotect.utils.from_js_time","title":"<code>from_js_time(num: Union[float, str, datetime]) -&gt; datetime</code>","text":"<p>Converts Javascript timestamp to Python datetime</p>"},{"location":"api/#pyunifiprotect.utils.get_local_timezone","title":"<code>get_local_timezone() -&gt; tzinfo</code>","text":"<p>Gets Olson timezone name for localizing datetimes</p>"},{"location":"api/#pyunifiprotect.utils.is_debug","title":"<code>is_debug() -&gt; bool</code>","text":"<p>Returns if debug ENV is on (True)</p>"},{"location":"api/#pyunifiprotect.utils.local_datetime","title":"<code>local_datetime(dt: datetime | None = None) -&gt; datetime</code>","text":"<p>Returns datetime in local timezone</p>"},{"location":"api/#pyunifiprotect.utils.process_datetime","title":"<code>process_datetime(data: dict[str, Any], key: str) -&gt; Optional[datetime]</code>","text":"<p>Extracts datetime object from Protect dictionary</p>"},{"location":"api/#pyunifiprotect.utils.run_async","title":"<code>run_async(callback: Coroutine[Any, Any, T]) -&gt; T</code>","text":"<p>Run async coroutine.</p>"},{"location":"api/#pyunifiprotect.utils.serialize_coord","title":"<code>serialize_coord(coord: CoordType) -&gt; Union[int, float]</code>","text":"<p>Serializes UFP zone coordinate</p>"},{"location":"api/#pyunifiprotect.utils.serialize_dict","title":"<code>serialize_dict(data: dict[str, Any], levels: int = -1) -&gt; dict[str, Any]</code>","text":"<p>Serializes UFP data dict</p>"},{"location":"api/#pyunifiprotect.utils.serialize_list","title":"<code>serialize_list(items: Iterable[Any], levels: int = -1) -&gt; list[Any]</code>","text":"<p>Serializes UFP data list</p>"},{"location":"api/#pyunifiprotect.utils.serialize_point","title":"<code>serialize_point(point: tuple[CoordType, CoordType]) -&gt; list[Union[int, float]]</code>","text":"<p>Serializes UFP zone coordinate point</p>"},{"location":"api/#pyunifiprotect.utils.serialize_unifi_obj","title":"<code>serialize_unifi_obj(value: Any, levels: int = -1) -&gt; Any</code>","text":"<p>Serializes UFP data</p>"},{"location":"api/#pyunifiprotect.utils.set_debug","title":"<code>set_debug() -&gt; None</code>","text":"<p>Sets ENV variable for UFP_DEBUG to on (True)</p>"},{"location":"api/#pyunifiprotect.utils.set_no_debug","title":"<code>set_no_debug() -&gt; None</code>","text":"<p>Sets ENV variable for UFP_DEBUG to off (False)</p>"},{"location":"api/#pyunifiprotect.utils.to_camel_case","title":"<code>to_camel_case(name: str) -&gt; str</code>","text":"<p>Converts string to camelCase</p>"},{"location":"api/#pyunifiprotect.utils.to_js_time","title":"<code>to_js_time(dt: datetime | int | None) -&gt; Optional[int]</code>","text":"<p>Converts Python datetime to Javascript timestamp</p>"},{"location":"api/#pyunifiprotect.utils.to_ms","title":"<code>to_ms(duration: Optional[timedelta]) -&gt; Optional[int]</code>","text":"<p>Converts python timedelta to Milliseconds</p>"},{"location":"api/#pyunifiprotect.utils.to_snake_case","title":"<code>to_snake_case(name: str) -&gt; str</code>  <code>cached</code>","text":"<p>Converts string to snake_case</p>"},{"location":"api/#websocket-pyunifiprotectwebsocket","title":"Websocket (<code>pyunifiprotect.websocket</code>)","text":"<p>UniFi Protect Websockets.</p>"},{"location":"api/#pyunifiprotect.websocket.Websocket","title":"<code>Websocket</code>","text":"<p>UniFi Protect Websocket manager.</p>"},{"location":"api/#pyunifiprotect.websocket.Websocket.has_recent_connect","title":"<code>has_recent_connect: bool</code>  <code>property</code>","text":"<p>Check if Websocket has recent connection.</p>"},{"location":"api/#pyunifiprotect.websocket.Websocket.is_connected","title":"<code>is_connected: bool</code>  <code>property</code>","text":"<p>Check if Websocket connected.</p>"},{"location":"api/#pyunifiprotect.websocket.Websocket.__init__","title":"<code>__init__(url: str, auth_callback: CALLBACK_TYPE, *, timeout: int = 30, backoff: int = 10, verify: bool = True) -&gt; None</code>","text":"<p>Init Websocket.</p>"},{"location":"api/#pyunifiprotect.websocket.Websocket.connect","title":"<code>connect() -&gt; bool</code>  <code>async</code>","text":"<p>Connect the websocket.</p>"},{"location":"api/#pyunifiprotect.websocket.Websocket.disconnect","title":"<code>disconnect() -&gt; None</code>  <code>async</code>","text":"<p>Disconnect the websocket.</p>"},{"location":"api/#pyunifiprotect.websocket.Websocket.reconnect","title":"<code>reconnect() -&gt; bool</code>  <code>async</code>","text":"<p>Reconnect the websocket.</p>"},{"location":"api/#pyunifiprotect.websocket.Websocket.subscribe","title":"<code>subscribe(ws_callback: Callable[[WSMessage], None]) -&gt; Callable[[], None]</code>","text":"<p>Subscribe to raw websocket messages.</p> <p>Returns a callback that will unsubscribe.</p>"},{"location":"cli/","title":"Command Line","text":"<p>The <code>unifi-protect</code> command is provided to give a CLI interface to interact with your UniFi Protect instance as well. All commands support JSON output so it works great with <code>jq</code> for complex scripting.</p>"},{"location":"cli/#authentication","title":"Authentication","text":"<p>Following traditional twelve factor app design, the preferred way to provided authentication credentials to provided environment variables, but CLI args are also supported.</p> <p>About Ubiquiti SSO accounts</p> <p>Ubiquiti SSO accounts are not supported and actively discouraged from being used. There is no option to use MFA. You are expected to use local access user. <code>pyunifiprotect</code> is not designed to allow you to use your owner account to access the your console or to be used over the public Internet as both pose a security risk.</p>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":"Bash<pre><code>export UFP_USERNAME=YOUR_USERNAME_HERE\nexport UFP_PASSWORD=YOUR_PASSWORD_HERE\nexport UFP_ADDRESS=YOUR_IP_ADDRESS\nexport UFP_PORT=443\n# change to false if you do not have a valid HTTPS Certificate for your instance\nexport UFP_SSL_VERIFY=True\n\nunifi-protect nvr\n</code></pre>"},{"location":"cli/#cli-args","title":"CLI Args","text":"Bash<pre><code>unifi-protect -U YOUR_USERNAME_HERE -P YOUR_PASSWORD_HERE -a YOUR_IP_ADDRESS -p 443 --no-verify nvr\n</code></pre>"},{"location":"cli/#timezones","title":"Timezones","text":"<p>A number of commands allow you to enter a datetime as an argument or output files with the datetime in the filename. As a result, it is very important for <code>pyunifiprotect</code> to know your consoles local timezone. If you on a physical machine (not docker/VM), chances are this is already set up correctly for you (<code>/etc/localtime</code>), but otherwise you may need to set the <code>TZ</code> environment variable. <code>TZ</code> can also be used to override your system timezone as well if for whatever reason you need to. It should be the Olson timezone name for the timezone that your UniFi Protect Instance is in.</p> Bash<pre><code>TZ=America/New_York unifi-protect --help\n</code></pre> <p>Note</p> <p>If for whatever reason your system does not have then correct timezone data, you can install the <code>tz</code> extra to get the data. This just adds the package tzdata as a requirement. It is included by default in the Docker image.</p> Bash<pre><code>pip install pyunifiprotect[tz]\n</code></pre>"},{"location":"cli/#reference","title":"Reference","text":"Bash<pre><code>$ unifi-protect --help\nUsage: unifi-protect [OPTIONS] COMMAND [ARGS]...\n\nUniFi Protect CLI\n</code></pre>"},{"location":"cli/#options","title":"Options","text":"Option Required? Env Type Default Description <code>-U</code> <code>--username</code> <code>UFP_USERNAME</code> text UniFi Protect username <code>-P</code> <code>--password</code> <code>UFP_PASSWORD</code> text UniFi Protect password <code>-a</code> <code>--address</code> <code>UFP_ADDRESS</code> text UniFi Protect IP address or hostname <code>-p</code> <code>--port</code> <code>UFP_PORT</code> integer <code>443</code> UniFi Protect port <code>--no-verify</code> <code>UFP_SSL_VERIFY</code> boolean <code>True</code> Verify SSL <code>--output-format</code> <code>json</code>,<code>plain</code> <code>plain</code> Preferred output format. Not all commands support both JSON and plain and may still output in one or the other. <code>-u</code> <code>--include-unadopted</code> Include devices not adopted by this NVR. <code>--show-completion</code> Show completion for the current shell, to copy it or customize the installation. <code>--help</code> Show help message and exit."},{"location":"cli/#subcommands","title":"Subcommands","text":"<p>For any subcommand you can use <code>unifi-protect COMMAND --help</code></p> Command Description <code>backup</code> Backup CLI. <code>cameras</code> Camera device CLI. <code>chimes</code> Chime device CLI. <code>decode-ws-msg</code> Decodes a base64 encoded UniFi Protect Websocket binary message. <code>doorlocks</code> Doorlock device CLI. <code>events</code> Events CLI. <code>generate-sample-data</code> Generates sample data for UniFi Protect instance. <code>lights</code> Lights device CLI. <code>liveviews</code> Liveviews CLI. <code>nvr</code> NVR device CLI. <code>profile-ws</code> Profiles Websocket messages for UniFi Protect instance. <code>sensors</code> Sensors device CLI. <code>shell</code> Opens iPython shell with Protect client initialized. <code>viewers</code> Viewers device CLI."},{"location":"cli/#multiple-item-cli-commands","title":"Multiple Item CLI Commands","text":"<p>All adoptable device CLIs, event and liveview CLI work on the idea you have multiple cameras, multiple lights, multiple events or multiple liveviews. As such, they have four variations:</p> Bash<pre><code># list all devices (or events/liveviews)\nunifi-protect cameras\n\n# list short list of all devices (or events/liveviews)\nunifi-protect cameras list-ids\n\n# list a specific device (or event/liveview)\nunifi-protect cameras DEVICE_ID\n\n# run a command against a specific device (or event/liveview)\nunifi-protect cameras DEVICE_ID COMMAND\n</code></pre> <p>Note</p> <p>The \"list all devices\" and \"list a specific device\" commands always return raw JSON. These commands can be paired with jq to parse and quick extra device data from them.</p> Command Description <code>list-ids</code> Requires no device ID. Prints list of \"id name\" for each device. <code>set-person-track</code> Requires device ID. Sets person auto tracking on or off for PTZ cameras."},{"location":"cli/#examples","title":"Examples","text":""},{"location":"cli/#list-all-cameras","title":"List All Cameras","text":"PlainJSON Bash<pre><code>$ unifi-protect cameras list-ids\n\n61b3f5c7033ea703e7000424: G4 Bullet\n61f9824e004adc03e700132c: G4 PTZ\n61be1d2f004bda03e700ab12: G4 Dome\n</code></pre> Bash<pre><code>$ unifi-protect --output-format json cameras list-ids\n\n[\n  [\n    \"61b3f5c7033ea703e7000424\",\n    \"G4 Bullet\"\n  ],\n  [\n    \"61f9824e004adc03e700132c\",\n    \"G4 PTZ\"\n  ],\n  [\n    \"61be1d2f004bda03e700ab12\",\n    \"G4 Done\"\n  ],\n  ...\n]\n</code></pre>"},{"location":"cli/#check-if-a-light-is-online","title":"Check if a Light is Online","text":"Bash<pre><code>$ unifi-protect cameras 61ddb66b018e2703e7008c19 | jq .isConnected\ntrue\n</code></pre>"},{"location":"cli/#take-snapshot-of-camera","title":"Take Snapshot of Camera","text":"Bash<pre><code>$ unifi-protect cameras 61ddb66b018e2703e7008c19 save-snapshot output.jpg\n</code></pre>"},{"location":"cli/#adoptable-devices-cli-commands","title":"Adoptable Devices CLI Commands","text":"<p>Adoptable devices (Cameras, Chimes, Doorlocks, Lights, Sensors, Viewers) all have some commands in common.</p> Command Description <code>adopt</code> Adopts a device. <code>bridge</code> Returns bridge device if connected via Bluetooth. <code>is-bluetooth</code> Returns if the device has Bluetooth or not. <code>is-wifi</code> Returns if the device has WiFi or not. <code>is-wired</code> Returns if the device is wired or not. <code>protect-url</code> Gets UniFi Protect management URL. <code>reboot</code> Reboots the device. <code>unadopt</code> Unadopt/Unmanage adopted device. <code>update</code> Updates the device."},{"location":"cli/#backup-cli","title":"Backup CLI","text":"Bash<pre><code>$ unifi-protect backup --help\n\n Usage: unifi-protect backup [OPTIONS] COMMAND [ARGS]...\n\n Backup CLI.\n The backup CLI is still very WIP in progress and consider experimental and potentially unstable (interface may change in the future).\n</code></pre>"},{"location":"cli/#backup-options","title":"Backup Options","text":"Option Env Type Default Description <code>-s</code> <code>--start</code> <code>UFP_BACKUP_START</code> datetime Cutoff for start of backup. Defaults to start of recording for NVR. <code>-e</code> <code>--end</code> <code>UFP_BACKUP_END</code> datetime Cutoff for end of backup. Defaults to now. <code>--output-folder</code> <code>UFP_BACKUP_OUTPUT</code> path <code>$PWD</code> Base dir for creating files. Defaults to $PWD. <code>--thumb-format</code> text <code>{year}/{month}/{day}/{hour}/{datetime}{sep}{mac}{sep}{camera_slug}{event_type}{sep}thumb.jpg</code> Filename format to save event thumbnails to. Set to empty string (\"\") to skip saving event thumbnails. <code>--gif-format</code> text <code>{year}/{month}/{day}/{hour}/{datetime}{sep}{mac}{sep}{camera_slug}{event_type}{sep}animated.gif]</code> Filename format to save event gifs to. Set to empty string (\"\") to skip saving event gif. <code>--event-format</code> text <code>{year}/{month}/{day}/{hour}/{datetime}{sep}{mac}{sep}{camera_slug}{event_type}.mp4</code> Filename format to save event gifs to. Set to empty string (\"\") to skip saving event videos. <code>--title-format</code> text <code>{time_sort_pretty_local} {sep} {camera_name} {sep} {event_type_pretty} {sep} {length_pretty}</code> Format to use to tag title for video metadata. <code>-v</code> <code>--verbose</code> boolean <code>False</code> Debug logging. <code>-d</code> <code>--max-download</code> integer <code>5</code> Max number of concurrent downloads. Adds additional loads to NVR. <code>--page-size</code> integer <code>1000</code> Number of events fetched at once from local database. Increases memory usage. <code>--length-cutoff</code> integer <code>3600</code> Event size cutoff for detecting abnormal events (in seconds). <code>--sep</code> boolean <code>-</code> Separator used for formatting. <code>--help</code> Show help message and exit."},{"location":"cli/#file-name-and-title-formatting","title":"File Name and Title Formatting","text":"<p>There are 5 options controlling output format for file names and metadata. This allows you to customize backups to your liking. All 5 options are a template string. Here are all of the available templating variables:</p> Variable Description <code>year</code> UTC year of start of export. <code>month</code> UTC month of start of export. <code>day</code> UTC day of start of export. <code>hour</code> UTC hour of start of export. <code>minute</code> UTC minute of start of export. <code>datetime</code> ISO 8601 formatted UTC datetime of start of export. Uses <code>sep</code> between parts. <code>date</code> ISO 8601 formatted UTC date of start of export. Uses <code>sep</code> between parts. <code>time</code> UTC time of start of export. Uses <code>sep</code> between parts. 24 hour time. <code>time_sort_pretty</code> UTC time of start of export. Uses <code>:</code> between parts. 24 hour time. <code>time_pretty</code> UTC time of start of export. Uses <code>:</code> between parts. 12 hour time with AM/PM. <code>year_local</code> Local year of start of export. <code>month_local</code> Local month of start of export. <code>day_local</code> Local day of start of export. <code>hour_local</code> Local hour of start of export. <code>minute_local</code> Local minute of start of export. <code>datetime_local</code> ISO 8601 formatted Local datetime of start of export. Uses <code>sep</code> between parts. <code>date_local</code> ISO 8601 formatted Local date of start of export. Uses <code>sep</code> between parts. <code>time_local</code> Local time of start of export. Uses <code>sep</code> between parts. 24 hour time. <code>time_sort_pretty_local</code> Local time of start of export. Uses <code>:</code> between parts. 24 hour time. <code>time_pretty_local</code> Local time of start of export. Uses <code>:</code> between parts. 12 hour time with AM/PM. <code>mac</code> MAC address of camera. <code>camera_name</code> Name of camera. <code>camera_slug</code> Lowercased name of camera with spaces replaced with <code>sep</code>. <code>event_type</code> Lowercased name of the event exported. <code>event_type_pretty</code> More human readable name of event exported. <code>length_pretty</code> Human readable version of the length of the clip exported. <code>sep</code> Separator to use in many cases."},{"location":"cli/#datetimes","title":"Datetimes","text":"<p>All datetimes for the Backup CLi can either be in ISO 8601 format or can be a human readable format that the Python library dateparse can understand. This will allow relative datetimes to be passed, such as <code>\"1 hour ago\"</code> which will make backing up incremental for cron jobs.</p>"},{"location":"cli/#formatting-for-plex","title":"Formatting for Plex","text":"<p>You are able to export your Camera events and then access them in Plex relatively well. For setup in Plex, the following is recommended:</p> <ul> <li>Enable the \"Local Media Assets\" Agent Source for the Movies Library Type (Settings -&gt; Agents -&gt; Movies). Plex docs.</li> <li>Create a \"Other Videos\" library pointing to the same folder as your --output-folder folder.<ul> <li>Scanner: \"Plex Video Files Scanner\"</li> <li>Agent: \"Personal Media\"</li> </ul> </li> </ul> <p>Recommended formats for the backup command:</p> Option Format <code>--thumb-format</code> <code>{year_local}/{month_local}/{day_local}/{hour_local}/{title}.jpg</code> <code>--gif-format</code> <code>{year_local}/{month_local}/{day_local}/{hour_local}/{title}.gif</code> <code>--event-format</code> <code>{year_local}/{month_local}/{day_local}/{hour_local}/{title}.mp4</code> <code>--title-format</code> <code>default</code> or whatever you want the title to be in Plex."},{"location":"cli/#backing-up-camera-events","title":"Backing Up Camera Events","text":"Bash<pre><code>$ unifi-protect backup events --help\n\n Usage: unifi-protect backup events [OPTIONS]\n\n Backup thumbnails and video clips for camera events.\n</code></pre> Option Type Default Description <code>-t</code> <code>--event-type</code> <code>motion</code>, <code>ring</code>, <code>smartDetectZone</code> <code>motion</code>, <code>ring</code>, <code>smartDetectZone</code> Events to export. Can be used multiple time. <code>-m</code> <code>--smart-type</code> <code>person</code>, <code>vehicle</code>, <code>package</code> <code>person</code>, <code>vehicle</code>, <code>package</code> Smart Detection types to export. Can be used multiple time. <code>-p</code> <code>--prune</code> boolean <code>False</code> Prune events older then start. <code>-f</code> <code>--force</code> boolean <code>False</code> Force update all events and redownload all clips. <code>-v</code> <code>--verify</code> boolean <code>False</code> Verifies files on disk. <code>--no-input</code> boolean <code>False</code> Disables confirmation prompt if <code>-p</code> and <code>-f</code> both passed. <code>--help</code> Show help message and exit. <p>The <code>backup events</code> command essentially mirrors all of the selected events from your UniFi Protect instance into a local sqlite database (<code>events.db</code> inside of the <code>--output-folder</code>). As a result, the initial run make take a really long time to run if your UniFi Protect instance has a lot of events inside of it.</p> <p>As an example using a UniFi Protect instance with ~200k events and ~8 months of camera footage:</p> <ul> <li>Building the database is in the range of hours</li> <li>Doing the initial download of event thumbnails, gifs and video clips is in the range of tens of hours (potentially 1-2 days)</li> <li>Incremental or targeted backups are much faster (&lt;1 per event)</li> </ul> <p>Cron Usage</p> <p>For incremental backups in crons, it is recommended you run the command with an absolute start first to build your events database and do an initial download of files. This will significantly speed up the incremental backup commands.</p>"},{"location":"cli/#examples_1","title":"Examples","text":""},{"location":"cli/#backup-all-events","title":"Backup All Events","text":"Bash<pre><code>unifi-protect backup events\n</code></pre>"},{"location":"cli/#backup-all-smart-detections-for-the-past-hour","title":"Backup All Smart Detections for the Past Hour","text":"Bash<pre><code>unifi-protect backup --start \"1 hour ago\" events -t smartDetectZone\n</code></pre>"},{"location":"cli/#backup-all-person-smart-detections-from-december-31st-at-10pm-to-january-1st-at-5am","title":"Backup All Person Smart Detections from December 31st at 10PM to January 1st at 5AM","text":"Bash<pre><code>unifi-protect backup --start \"2021-12-31T22:00:00\" --end \"2022-1-1T05:00:00\" events -t smartDetectZone -m person\n</code></pre>"},{"location":"cli/#camera-cli","title":"Camera CLI","text":"<p>Inherits Multiple Item CLI Commands and Adoptable Devices CLI Commands.</p>"},{"location":"cli/#examples_2","title":"Examples","text":""},{"location":"cli/#take-snapshot-of-camera_1","title":"Take Snapshot of Camera","text":"Bash<pre><code>$ unifi-protect cameras 61ddb66b018e2703e7008c19 save-snapshot output.jpg\n</code></pre>"},{"location":"cli/#export-video-from-camera","title":"Export Video From Camera","text":"Bash<pre><code>$ unifi-protect cameras 61ddb66b018e2703e7008c19 save-video export.mp4 2022-6-1T00:00:00 2022-6-1T00:00:30\n</code></pre> <p>Timezones</p> <p>See the section on Timezones for determined what timezone your datetimes are in.</p>"},{"location":"cli/#play-audio-file-to-cameras-speaker","title":"Play Audio File to Cameras Speaker","text":"Bash<pre><code>$ unifi-protect cameras 61ddb66b018e2703e7008c19 play-audio test.mp3\n</code></pre>"},{"location":"cli/#include-unadopted-cameras-in-list","title":"Include Unadopted Cameras in list","text":"Bash<pre><code>$ unifi-protect -u cameras list-ids\n</code></pre>"},{"location":"cli/#adopt-an-unadopted-camera","title":"Adopt an Unadopted Camera","text":"Bash<pre><code>$ unifi-protect -u cameras 61ddb66b018e2703e7008c19 adopt\n</code></pre>"},{"location":"cli/#enable-ssh-on-camera","title":"Enable SSH on Camera","text":"Bash<pre><code>$ unifi-protect cameras 61ddb66b018e2703e7008c19 set-ssh true\n\n# get current value to verify\n$ unifi-protect cameras 61ddb66b018e2703e7008c19 | jq .isSshEnabled\ntrue\n</code></pre>"},{"location":"cli/#reboot-camera","title":"Reboot Camera","text":"Bash<pre><code>$ unifi-protect lights 61b3f5c801f8a703e7000428 reboot\n</code></pre>"},{"location":"cli/#reboot-all-cameras","title":"Reboot All Cameras","text":"Bash<pre><code>for id in $(unifi-protect cameras list-ids | awk '{ print $1 }'); do\n    unifi-protect cameras $id reboot\ndone\n</code></pre>"},{"location":"cli/#chime-cli","title":"Chime CLI","text":"<p>Inherits Multiple Item CLI Commands and Adoptable Devices CLI Commands.</p>"},{"location":"cli/#examples_3","title":"Examples","text":""},{"location":"cli/#set-paired-cameras","title":"Set Paired Cameras","text":"Bash<pre><code>$ unifi-protect chimes 6275b22e00e3c403e702a019 cameras 61ddb66b018e2703e7008c19 61f9824e004adc03e700132c\n</code></pre>"},{"location":"dev/","title":"Development","text":""},{"location":"dev/#setup","title":"Setup","text":""},{"location":"dev/#with-vs-code","title":"With VS Code","text":"<p>Development with this project is designed to be done via VS Code + Docker. It is a pretty standard Python package, so feel free to use anything else, but all documentation assumes you are using VS Code.</p> <ul> <li>VS Code + Remote Containers extension</li> <li>Docker<ul> <li>If you are using Linux, you need Docker Engine 19.0 or newer and you need to enable Docker Buildkit</li> <li>If you are using Docker Desktop on MacOS or Windows, you will need Docker Desktop 3.2.0 or newer</li> </ul> </li> </ul> <p>Once you have all three setup,</p> <ol> <li>Clone repo</li> <li>Open the main folder</li> <li>You should be prompted to \"Reopen folder to develop in a container\". If you are not, you can open the Command Palette run the \"Remote-Containers: Reopen in Container\" command.</li> </ol> <p>This should be all you need to do to get a working development environment. The docker container will automatically be build and VS Code will attach itself to it. The integrated terminal in VS Code will already be set up with the <code>unifi-protect</code> command.</p>"},{"location":"dev/#docker-without-vs-code","title":"Docker (without VS Code)","text":"<p>You can still setup develop without VS Code, but it is still recommended to use the development container to ensure you have all of the required dependancies. As a result, the above requirement for Docker is still needed.</p> <p>Once you have Docker setup,</p> <ol> <li>Clone repo</li> <li>Build and open dev container</li> </ol> Bash<pre><code>docker buildx build -f Dockerfile --target=dev -t pyunifiprotect-dev .\ndocker run --rm -it -v /home/cbailey/dev/pyunifiprotect:/workspaces/pyunifiprotect pyunifiprotect-dev bash\n</code></pre>"},{"location":"dev/#authenticating-with-your-local-protect-instance","title":"Authenticating with your Local Protect Instance","text":"<p>The project allows you to create an environment file to put your local protect instance data into so you do not need to constantly enter in or accidentally commit it to the Git repo.</p> <p>Make a file in the root of the project named <code>.env</code> with the following and change accordingly:</p> Text Only<pre><code>UFP_USERNAME=YOUR_USERNAME_HERE\nUFP_PASSWORD=YOUR_PASSWORD_HERE\nUFP_ADDRESS=YOUR_IP_ADDRESS\nUFP_PORT=443\n# change to false if you do not have a valid HTTPS Certificate for your instance\nUFP_SSL_VERIFY=True\n</code></pre>"},{"location":"dev/#linting-and-testing","title":"Linting and Testing","text":"<p>The following scripts exist to easily format, lint and test code in the same fashion as CI:</p> Text Only<pre><code>.bin/format-code\n.bin/lint-code\n.bin/test-code\n</code></pre> <p>These commands are also all available as VS Code tasks as well. Tests are also fully integration with the Testing panel in VS Code and can be easily debug from there.</p>"},{"location":"dev/#updating-requirements","title":"Updating Requirements","text":"<p>To generate an updated pinned requirements file to be used for testing and CI using the <code>.bin/update-requirements</code> script.</p> <p>There is also a VS Code task to run this as well.</p>"},{"location":"dev/#generating-test-data","title":"Generating Test Data","text":"<p>All of the tests in the project are ran against that is generated from a real UniFi Protect instance and then anonymized so it is safe to commit to a Git repo. To generate new sample test data:</p> Text Only<pre><code>unifi-protect generate-sample-data\n</code></pre> <p>This will gather test data for 30 seconds and write it all into the <code>tests/sample_data</code> directory. During this time, it is a good idea to generate some good events that can tested. An example would be to generate a motion event for a FloodLight, Camera and/or Doorbell and then also ring a Doorbell.</p> <ul> <li>All of the data that is generated is automatically anonymized so nothing sensitive about your NVR is exposed. To skip anonymization, use the <code>--actual</code> option.</li> <li>To change output directory for sample data use the <code>-o / --output</code> option.</li> <li>To adjust the time adjust how long to wait for Websocket messages, use the <code>-w / --wait</code> option.</li> <li>To automatically zip up the generated sample data, use the <code>--zip</code> option.</li> </ul> Bash<pre><code>export UFP_SAMPLE_DIR=/workspaces/pyunifiprotect/test-data\nunifi-protect generate-sample-data\n</code></pre>"},{"location":"dev/#real-data-in-tests","title":"Real Data in Tests","text":"<p><code>pytest</code> will automatically also use the <code>UFP_SAMPLE_DIR</code> environment variable to locate sample data for running tests. This allows you to run <code>pytest</code> against a real NVR instance.</p> Bash<pre><code>export UFP_SAMPLE_DIR=/workspaces/pyunifiprotect/test-data\npytest\n</code></pre>"}]}